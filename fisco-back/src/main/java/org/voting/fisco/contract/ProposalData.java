package org.voting.fisco.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class ProposalData extends Contract {
    public static final String[] BINARY_ARRAY = {"","00000000000000000000000000000000000000028152600401602060405180830381600087803b158015610c5b57600080fd5b505af1158015610c6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610c939190810190611fda565b91508173ffffffffffffffffffffffffffffffffffffffff1663e942b51688886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610cec9291906127f6565b600060405180830381600087803b158015610d0657600080fd5b505af1158015610d1a573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663bf2b70a18b84866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610d7793929190612788565b602060405180830381600087803b158015610d9157600080fd5b505af1158015610da5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610dc9919081019061202c565b90506000811315610dde576001549450610de2565b8094505b5050505095945050505050565b600080600061100191508173ffffffffffffffffffffffffffffffffffffffff166356004b6a6040805190810160405280600c81526020017f50726f706f73616c4461746100000000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610e83919061282d565b602060405180830381600087803b158015610e9d57600080fd5b505af1158015610eb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ed5919081019061202c565b9050809250505090565b600080600080610f5a6040805190810160405280600c81526020017f50726f706f73616c4461746100000000000000000000000000000000000000008152506040805190810160405280600a81526020017f42616c6c6f744e616d650000000000000000000000000000000000000000000081525087611c41565b925092508273ffffffffffffffffffffffffffffffffffffffff1663e8434e3987846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610fb5929190612728565b602060405180830381600087803b158015610fcf57600080fd5b505af1158015610fe3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110079190810190611fb1565b905060008173ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561106f57600080fd5b505af1158015611083573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110a7919081019061202c565b14156110b75760025493506110bd565b60035493505b50505092915050565b6060600080600061110d6040805190810160405280600c81526020017f50726f706f73616c4461746100000000000000000000000000000000000000008152508888611c41565b925092508273ffffffffffffffffffffffffffffffffffffffff1663e8434e3989846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611168929190612728565b602060405180830381600087803b15801561118257600080fd5b505af1158015611196573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111ba9190810190611fb1565b905060008173ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561122257600080fd5b505af1158015611236573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061125a919081019061202c565b141561129d576040805190810160405280600581526020017f6572726f7200000000000000000000000000000000000000000000000000000081525093506113f3565b8073ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016112f391906126c9565b602060405180830381600087803b15801561130d57600080fd5b505af1158015611321573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113459190810190611fda565b73ffffffffffffffffffffffffffffffffffffffff16639c981fcb866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016113999190612706565b600060405180830381600087803b1580156113b357600080fd5b505af11580156113c7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506113f09190810190612096565b93505b505050949350505050565b6000806000806114446040805190810160405280600c81526020017f50726f706f73616c4461746100000000000000000000000000000000000000008152508888611c41565b925092508273ffffffffffffffffffffffffffffffffffffffff1663e8434e3989846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161149f929190612728565b602060405180830381600087803b1580156114b957600080fd5b505af11580156114cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114f19190810190611fb1565b905060008173ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561155957600080fd5b505af115801561156d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611591919081019061202c565b14156115a15760005493506116f2565b8073ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016115f791906126c9565b602060405180830381600087803b15801561161157600080fd5b505af1158015611625573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116499190810190611fda565b73ffffffffffffffffffffffffffffffffffffffff1663fda69fae866040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161169d9190612706565b602060405180830381600087803b1580156116b757600080fd5b505af11580156116cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116ef919081019061202c565b93505b505050949350505050565b606060008060006060600061177d6040805190810160405280600c81526020017f50726f706f73616c4461746100000000000000000000000000000000000000008152506040805190810160405280600d81526020017f50726f706f73616c5469746c650000000000000000000000000000000000000081525089611c41565b945094508473ffffffffffffffffffffffffffffffffffffffff1663e8434e3988866040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016117d8929190612728565b602060405180830381600087803b1580156117f257600080fd5b505af1158015611806573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061182a9190810190611fb1565b92508273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561189057600080fd5b505af11580156118a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506118c8919081019061202c565b6040519080825280602002602001820160405280156118fb57816020015b60608152602001906001900390816118e65790505b509150600090505b8273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561196757600080fd5b505af115801561197b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061199f919081019061202c565b811215611b1e578273ffffffffffffffffffffffffffffffffffffffff1663846719e0826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016119fb91906126ae565b602060405180830381600087803b158015611a1557600080fd5b505af1158015611a29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611a4d9190810190611fda565b73ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611a9f906128d1565b600060405180830381600087803b158015611ab957600080fd5b505af1158015611acd573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250611af69190810190612096565b8282815181101515611b0457fe5b906020019060200201819052508080600101915050611903565b8195505050505050919050565b600080600080611b716040805190810160405280600c81526020017f50726f706f73616c4461746100000000000000000000000000000000000000008152508787611c41565b925092508273ffffffffffffffffffffffffffffffffffffffff166328bb211788846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611bcc929190612728565b602060405180830381600087803b158015611be657600080fd5b505af1158015611bfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611c1e919081019061202c565b90506000811315611c33","","6100f85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561011257600080fd5b5061016d600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610430565b60405180826000191660001916815260200191505060405180910390f35b34801561019757600080fd5b506101b66004803603810190808035906020019092919050505061043e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101f65780820151818401526020810190506101db565b50505050905090810190601f1680156102235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60608060008060006060600060206040519080825280601f01601f1916602001820160405280156102715781602001602082028038833980820191505090505b50955060009450600093505b602084101561033b578360080260020a886001900402600102925060007f010000000000000000000000000000000000000000000000000000000000000002837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614151561032e578286868151811015156102f557fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535084806001019550505b838060010194505061027d565b846040519080825280601f01601f19166020018201604052801561036e5781602001602082028038833980820191505090505b509150600090505b8481101561042257858181518110151561038c57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000282828151811015156103e557fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050610376565b819650505050505050919050565b600060208201519050919050565b6060600080606060008086141561048c576040805190810160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250945061058c565b8593505b6000841415156104b6578280600101935050600a848115156104ae57fe5b049350610490565b826040519080825280601f01601f1916602001820160405280156104e95781602001602082028038833980820191505090505b5091506001830390505b60008614151561058857600a8681151561050957fe5b066030017f01000000000000000000000000000000000000000000000000000000000000000282828060019003935081518110151561054457fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8681151561058057fe5b0495506104f3565b8194505b505050509190505600a165627a7a723058209c093563a3fe7d2685274ae2016ed0ff5deacd232088ea3703ea29d8bad347f30029"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","576001549350611c37565b8093505b5050509392505050565b600080600080600061100192508273ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600c81526020017f50726f706f73616c4461746100000000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611cd891906126e4565b602060405180830381600087803b158015611cf257600080fd5b505af1158015611d06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611d2a9190810190612003565b91508173ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611d9057600080fd5b505af1158015611da4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611dc89190810190611f88565b90508073ffffffffffffffffffffffffffffffffffffffff1663ae763db588886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611e219291906127f6565b600060405180830381600087803b158015611e3b57600080fd5b505af1158015611e4f573d6000803e3d6000fd5b50505050818194509450505050935093915050565b6000611e708251612a19565b905092915050565b6000611e848251612a2b565b905092915050565b6000611e988251612a3d565b905092915050565b6000611eac8251612a4f565b905092915050565b6000611ec08235612a61565b905092915050565b6000611ed48251612a61565b905092915050565b600082601f8301121515611eef57600080fd5b8135611f02611efd82612988565b61295b565b91508082526020830160208301858383011115611f1e57600080fd5b611f29838284612aa1565b50505092915050565b600082601f8301121515611f4557600080fd5b8151611f58611f5382612988565b61295b565b91508082526020830160208301858383011115611f7457600080fd5b611f7f838284612ab0565b50505092915050565b600060208284031215611f9a57600080fd5b6000611fa884828501611e64565b91505092915050565b600060208284031215611fc357600080fd5b6000611fd184828501611e78565b91505092915050565b600060208284031215611fec57600080fd5b6000611ffa84828501611e8c565b91505092915050565b60006020828403121561201557600080fd5b600061202384828501611ea0565b91505092915050565b60006020828403121561203e57600080fd5b600061204c84828501611ec8565b91505092915050565b60006020828403121561206757600080fd5b600082013567ffffffffffffffff81111561208157600080fd5b61208d84828501611edc565b91505092915050565b6000602082840312156120a857600080fd5b600082015167ffffffffffffffff8111156120c257600080fd5b6120ce84828501611f32565b91505092915050565b600080604083850312156120ea57600080fd5b600083013567ffffffffffffffff81111561210457600080fd5b61211085828601611edc565b925050602083013567ffffffffffffffff81111561212d57600080fd5b61213985828601611edc565b9150509250929050565b60008060006060848603121561215857600080fd5b600084013567ffffffffffffffff81111561217257600080fd5b61217e86828701611edc565b935050602084013567ffffffffffffffff81111561219b57600080fd5b6121a786828701611edc565b925050604084013567ffffffffffffffff8111156121c457600080fd5b6121d086828701611edc565b9150509250925092565b600080600080608085870312156121f057600080fd5b600085013567ffffffffffffffff81111561220a57600080fd5b61221687828801611edc565b945050602085013567ffffffffffffffff81111561223357600080fd5b61223f87828801611edc565b935050604085013567ffffffffffffffff81111561225c57600080fd5b61226887828801611edc565b925050606085013567ffffffffffffffff81111561228557600080fd5b61229187828801611edc565b91505092959194509250565b600080600080600060a086880312156122b557600080fd5b600086013567ffffffffffffffff8111156122cf57600080fd5b6122db88828901611edc565b955050602086013567ffffffffffffffff8111156122f857600080fd5b61230488828901611edc565b945050604086013567ffffffffffffffff81111561232157600080fd5b61232d88828901611edc565b935050606086013567ffffffffffffffff81111561234a57600080fd5b61235688828901611edc565b925050608061236788828901611eb4565b9150509295509295909350565b600080600080600060a0868803121561238c57600080fd5b600086013567ffffffffffffffff8111156123a657600080fd5b6123b288828901611edc565b955050602086013567ffffffffffffffff8111156123cf57600080fd5b6123db88828901611edc565b945050604086013567ffffffffffffffff8111156123f857600080fd5b61240488828901611edc565b935050606086013567ffffffffffffffff81111561242157600080fd5b61242d88828901611edc565b925050608086013567ffffffffffffffff81111561244a57600080fd5b61245688828901611edc565b9150509295509295909350565b600061246e826129c1565b80845260208401935083602082028501612487856129b4565b60005b848110156124c05783830388526124a2838351612543565b92506124ad826129e2565b915060208801975060018101905061248a565b508196508694505050505092915050565b6124da81612a6b565b82525050565b6124e981612a7d565b82525050565b6124f881612a0f565b82525050565b61250781612a8f565b82525050565b6000612518826129d7565b80845261252c816020860160208601612ab0565b61253581612ae3565b602085010191505092915050565b600061254e826129cc565b808452612562816020860160208601612ab0565b61256b81612ae3565b602085010191505092915050565b6000600d82527f50726f706f73616c5469746c65000000000000000000000000000000000000006020830152604082019050919050565b6000600a82527f42616c6c6f744e616d65000000000000000000000000000000000000000000006020830152604082019050919050565b6000600982527f566f7465436f756e7400000000000000000000000000000000000000000000006020830152604082019050919050565b6000601982527f52616e6b2c42616c6c6f744e616d652c566f7465436f756e74000000000000006020830152604082019050919050565b6000600482527f52616e6b000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600060208201905081810360008301526126a68184612463565b905092915050565b60006020820190506126c360008301846124ef565b92915050565b60006020820190506126de60008301846124fe565b92915050565b600060208201905081810360008301526126fe8184612543565b905092915050565b60006020820190508181036000830152612720818461250d565b905092915050565b60006040820190508181036000830152612742818561250d565b905061275160208301846124d1565b9392505050565b60006040820190508181036000830152612772818561250d565b905061278160208301846124e0565b9392505050565b600060608201905081810360008301526127a2818661250d565b90506127b160208301856124e0565b6127be60408301846124d1565b949350505050565b600060408201905081810360008301526127e0818561250d565b90506127ef60208301846124ef565b9392505050565b60006040820190508181036000830152612810818561250d565b90508181036020830152612824818461250d565b90509392505050565b600060608201905081810360008301526128478184612543565b9050818103602083015261285a81612579565b9050818103604083015261286d8161261e565b905092915050565b6000604082019050818103600083015261288e81612579565b905081810360208301526128a2818461250d565b905092915050565b600060208201905081810360008301526128c3816125b0565b9050919050565b600060408201905081810360008301526128e3816125b0565b905081810360208301526128f7818461250d565b905092915050565b60006040820190508181036000830152612918816125e7565b905061292760208301846124ef565b92915050565b6000604082019050818103600083015261294681612655565b905061295560208301846124ef565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561297e57600080fd5b8060405250919050565b600067ffffffffffffffff82111561299f57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612a24826129ef565b9050919050565b6000612a36826129ef565b9050919050565b6000612a48826129ef565b9050919050565b6000612a5a826129ef565b9050919050565b6000819050919050565b6000612a76826129ef565b9050919050565b6000612a88826129ef565b9050919050565b6000612a9a82612a0f565b9050919050565b82818337600083830152505050565b60005b83811015612ace578082015181840152602081019050612ab3565b83811115612add576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058208ae80401cde1aa72bb873acde97a6480542baff9544319d8a114209638ee301c6c6578706572696d656e74616cf50037608060405234801561001057600080fd5b506105c1806100206000396000f300608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063446a1fe11461005c5780634ef4f309146101065780637287846d1461018b575b600080fd5b34801561006857600080fd5b5061008b6004803603810190808035600019169060200190929190505050610231565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100cb5780820151818401526020810190506100b0565b50505050905090810190601f168015","6100f85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561011257600080fd5b5061016d600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610430565b60405180826000191660001916815260200191505060405180910390f35b34801561019757600080fd5b506101b66004803603810190808035906020019092919050505061043e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101f65780820151818401526020810190506101db565b50505050905090810190601f1680156102235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60608060008060006060600060206040519080825280601f01601f1916602001820160405280156102715781602001602082028038833980820191505090505b50955060009450600093505b602084101561033b578360080260020a886001900402600102925060007f010000000000000000000000000000000000000000000000000000000000000002837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614151561032e578286868151811015156102f557fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535084806001019550505b838060010194505061027d565b846040519080825280601f01601f19166020018201604052801561036e5781602001602082028038833980820191505090505b509150600090505b8481101561042257858181518110151561038c57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000282828151811015156103e557fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050610376565b819650505050505050919050565b600060208201519050919050565b6060600080606060008086141561048c576040805190810160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250945061058c565b8593505b6000841415156104b6578280600101935050600a848115156104ae57fe5b049350610490565b826040519080825280601f01601f1916602001820160405280156104e95781602001602082028038833980820191505090505b5091506001830390505b60008614151561058857600a8681151561050957fe5b066030017f01000000000000000000000000000000000000000000000000000000000000000282828060019003935081518110151561054457fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8681151561058057fe5b0495506104f3565b8194505b505050509190505600a165627a7a723058206e289e814acf9d0636c9c699551be90f096b8474ffd972603859d402431dcd410029"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[{\"name\":\"main_value\",\"type\":\"string\"}],\"name\":\"getnums\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"main_value\",\"type\":\"string\"},{\"name\":\"key_name\",\"type\":\"string\"},{\"name\":\"key_value\",\"type\":\"string\"},{\"name\":\"new_name\",\"type\":\"string\"},{\"name\":\"new_value\",\"type\":\"int256\"}],\"name\":\"update\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposal_title\",\"type\":\"string\"},{\"name\":\"ballot_name\",\"type\":\"string\"}],\"name\":\"insert\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"main_value\",\"type\":\"string\"},{\"name\":\"key_name\",\"type\":\"string\"},{\"name\":\"key_value\",\"type\":\"string\"},{\"name\":\"new_name\",\"type\":\"string\"},{\"name\":\"new_value\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createProposalData\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"main_value\",\"type\":\"string\"},{\"name\":\"ballot_name\",\"type\":\"string\"}],\"name\":\"check\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"main_value\",\"type\":\"string\"},{\"name\":\"key_name\",\"type\":\"string\"},{\"name\":\"key_value\",\"type\":\"string\"},{\"name\":\"get_name\",\"type\":\"string\"}],\"name\":\"select\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"main_value\",\"type\":\"string\"},{\"name\":\"key_name\",\"type\":\"string\"},{\"name\":\"key_value\",\"type\":\"string\"},{\"name\":\"get_name\",\"type\":\"string\"}],\"name\":\"selectInt\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"title\",\"type\":\"string\"}],\"name\":\"show\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"main_value\",\"type\":\"string\"},{\"name\":\"key_name\",\"type\":\"string\"},{\"name\":\"key_value\",\"type\":\"string\"}],\"name\":\"remove\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"a\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"string\"}],\"name\":\"LogIncrement\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_GETNUMS = "getnums";

    public static final String FUNC_UPDATE = "update";

    public static final String FUNC_INSERT = "insert";

    public static final String FUNC_CREATEPROPOSALDATA = "createProposalData";

    public static final String FUNC_CHECK = "check";

    public static final String FUNC_SELECT = "select";

    public static final String FUNC_SELECTINT = "selectInt";

    public static final String FUNC_SHOW = "show";

    public static final String FUNC_REMOVE = "remove";

    public static final Event LOGINCREMENT_EVENT = new Event("LogIncrement", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}));
    ;

    protected ProposalData(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public BigInteger getnums(String main_value) throws ContractException {
        final Function function = new Function(FUNC_GETNUMS, 
                Arrays.<Type>asList(new Utf8String(main_value)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt update(String main_value, String key_name, String key_value, String new_name, BigInteger new_value) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value),
                new Utf8String(new_name),
                new Int256(new_value)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] update(String main_value, String key_name, String key_value, String new_name, BigInteger new_value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value),
                new Utf8String(new_name),
                new Int256(new_value)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdate(String main_value, String key_name, String key_value, String new_name, BigInteger new_value) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value),
                new Utf8String(new_name),
                new Int256(new_value)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, String, String, BigInteger> getUpdateStringStringStringStringInt256Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue()
                );
    }

    public Tuple1<BigInteger> getUpdateStringStringStringStringInt256Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt insert(String proposal_title, String ballot_name) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new Utf8String(proposal_title),
                new Utf8String(ballot_name)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] insert(String proposal_title, String ballot_name, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new Utf8String(proposal_title),
                new Utf8String(ballot_name)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInsert(String proposal_title, String ballot_name) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new Utf8String(proposal_title),
                new Utf8String(ballot_name)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getInsertInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getInsertOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt update(String main_value, String key_name, String key_value, String new_name, String new_value) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value),
                new Utf8String(new_name),
                new Utf8String(new_value)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] update(String main_value, String key_name, String key_value, String new_name, String new_value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value),
                new Utf8String(new_name),
                new Utf8String(new_value)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdate(String main_value, String key_name, String key_value, String new_name, String new_value) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value),
                new Utf8String(new_name),
                new Utf8String(new_value)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, String, String, String> getUpdateStringStringStringStringStringInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue()
                );
    }

    public Tuple1<BigInteger> getUpdateStringStringStringStringStringOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt createProposalData() {
        final Function function = new Function(
                FUNC_CREATEPROPOSALDATA, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] createProposalData(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEPROPOSALDATA, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateProposalData() {
        final Function function = new Function(
                FUNC_CREATEPROPOSALDATA, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getCreateProposalDataOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEPROPOSALDATA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt check(String main_value, String ballot_name) {
        final Function function = new Function(
                FUNC_CHECK, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(ballot_name)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] check(String main_value, String ballot_name, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CHECK, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(ballot_name)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCheck(String main_value, String ballot_name) {
        final Function function = new Function(
                FUNC_CHECK, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(ballot_name)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getCheckInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CHECK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getCheckOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CHECK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt select(String main_value, String key_name, String key_value, String get_name) {
        final Function function = new Function(
                FUNC_SELECT, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value),
                new Utf8String(get_name)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] select(String main_value, String key_name, String key_value, String get_name, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SELECT, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value),
                new Utf8String(get_name)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSelect(String main_value, String key_name, String key_value, String get_name) {
        final Function function = new Function(
                FUNC_SELECT, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value),
                new Utf8String(get_name)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, String, String> getSelectInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue()
                );
    }

    public Tuple1<String> getSelectOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt selectInt(String main_value, String key_name, String key_value, String get_name) {
        final Function function = new Function(
                FUNC_SELECTINT, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value),
                new Utf8String(get_name)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] selectInt(String main_value, String key_name, String key_value, String get_name, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SELECTINT, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value),
                new Utf8String(get_name)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSelectInt(String main_value, String key_name, String key_value, String get_name) {
        final Function function = new Function(
                FUNC_SELECTINT, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value),
                new Utf8String(get_name)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, String, String> getSelectIntInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SELECTINT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue()
                );
    }

    public Tuple1<BigInteger> getSelectIntOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SELECTINT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public List show(String title) throws ContractException {
        final Function function = new Function(FUNC_SHOW, 
                Arrays.<Type>asList(new Utf8String(title)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt remove(String main_value, String key_name, String key_value) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] remove(String main_value, String key_name, String key_value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemove(String main_value, String key_name, String key_value) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getRemoveInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getRemoveOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public List<LogIncrementEventResponse> getLogIncrementEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(LOGINCREMENT_EVENT, transactionReceipt);
        ArrayList<LogIncrementEventResponse> responses = new ArrayList<LogIncrementEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            LogIncrementEventResponse typedResponse = new LogIncrementEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.a = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.b = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeLogIncrementEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGINCREMENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeLogIncrementEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGINCREMENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static ProposalData load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new ProposalData(contractAddress, client, credential);
    }

    public static ProposalData deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(ProposalData.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class LogIncrementEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger a;

        public String b;
    }
}
