package org.voting.fisco.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class ProposalTitle extends Contract {
    public static final String[] BINARY_ARRAY = {"60806040527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00016000557fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00026001557fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00036002557fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0004600355348015620000a157600080fd5b50620000bb620000c2640100000000026401000000009004565b506200034e565b600080600061100191508173ffffffffffffffffffffffffffffffffffffffff166356004b6a6040805190810160405280600d81526020017f50726f706f73616c5469746c65000000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401620001589190620002a4565b602060405180830381600087803b1580156200017357600080fd5b505af115801562000188573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620001ae9190810190620001ce565b9050809250505090565b6000620001c68251620002fd565b905092915050565b600060208284031215620001e157600080fd5b6000620001f184828501620001b8565b91505092915050565b60006200020782620002f2565b8084526200021d81602086016020860162000307565b62000228816200033d565b602085010191505092915050565b6000601f82527f5469746c652c42656c6f6e675573657249442c446561646c696e6554696d65006020830152604082019050919050565b6000600582527f496e6465780000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006060820190508181036000830152620002c08184620001fa565b90508181036020830152620002d5816200026d565b90508181036040830152620002ea8162000236565b905092915050565b600081519050919050565b6000819050919050565b60005b83811015620003275780820151818401526020810190506200030a565b8381111562000337576000848401525b50505050565b6000601f19601f8301169050919050565b61238a806200035e6000396000f300608060405260043610610083576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306201393146100885780632b9df719146100c55780632fe99bdc1461010357806343cc63fa1461014057806380599e4b1461016b578063a83fc93e146101a8578063b6f921ad146101d3575b600080fd5b34801561009457600080fd5b506100af60048036036100aa9190810190611c7c565b610210565b6040516100bc9190611f64565b60405180910390f35b3480156100d157600080fd5b506100ec60048036036100e79190810190611c10565b61060b565b6040516100fa929190611f86565b60405180910390f35b34801561010f57600080fd5b5061012a60048036036101259190810190611c7c565b610cb5565b6040516101379190611fbd565b60405180910390f35b34801561014c57600080fd5b50610155611170565b6040516101629190611fbd565b60405180910390f35b34801561017757600080fd5b50610192600480360361018d9190810190611b8e565b611260565b60405161019f9190611fbd565b60405180910390f35b3480156101b457600080fd5b506101bd6113a9565b6040516101ca9190611fbd565b60405180910390f35b3480156101df57600080fd5b506101fa60048036036101f59190810190611b8e565b6115aa565b6040516102079190611fbd565b60405180910390f35b606060008060006060600061025b6040805190810160405280600d81526020017f50726f706f73616c5469746c65000000000000000000000000000000000000008152508a8a61178e565b945094508473ffffffffffffffffffffffffffffffffffffffff1663e8434e39856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016102b4919061209b565b602060405180830381600087803b1580156102ce57600080fd5b505af11580156102e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103069190810190611aea565b92508273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561036c57600080fd5b505af1158015610380573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103a49190810190611b65565b6040519080825280602002602001820160405280156103d757816020015b60608152602001906001900390816103c25790505b509150600090505b8273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561044357600080fd5b505af1158015610457573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061047b9190810190611b65565b8112156105fc578273ffffffffffffffffffffffffffffffffffffffff1663846719e0826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016104d79190611fbd565b602060405180830381600087803b1580156104f157600080fd5b505af1158015610505573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105299190810190611b13565b73ffffffffffffffffffffffffffffffffffffffff16639c981fcb886040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161057d9190611ffa565b600060405180830381600087803b15801561059757600080fd5b505af11580156105ab573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506105d49190810190611bcf565b82828151811015156105e257fe5b9060200190602002018190525080806001019150506103df565b81955050505050509392505050565b606080600080600060608060006106c26040805190810160405280600d81526020017f50726f706f73616c5469746c65000000000000000000000000000000000000008152506040805190810160405280600581526020017f496e6465780000000000000000000000000000000000000000000000000000008152506040805190810160405280600381526020017f544147000000000000000000000000000000000000000000000000000000000081525061178e565b955095508573ffffffffffffffffffffffffffffffffffffffff1663e8434e39866040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161071b919061209b565b602060405180830381600087803b15801561073557600080fd5b505af1158015610749573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061076d9190810190611aea565b93508373ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156107d357600080fd5b505af11580156107e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061080b9190810190611b65565b60405190808252806020026020018201604052801561083e57816020015b60608152602001906001900390816108295790505b5092508373ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156108a557600080fd5b505af11580156108b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506108dd9190810190611b65565b60405190808252806020026020018201604052801561091057816020015b60608152602001906001900390816108fb5790505b509150600090505b8373ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561097c57600080fd5b505af1158015610990573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506109b49190810190611b65565b811215610ca2578373ffffffffffffffffffffffffffffffffffffffff1663846719e0826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610a109190611fbd565b602060405180830381600087803b158015610a2a57600080fd5b505af1158015610a3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a629190810190611b13565b73ffffffffffffffffffffffffffffffffffffffff16639c981fcb8b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610ab69190611ffa565b600060405180830381600087803b158015610ad057600080fd5b505af1158015610ae4573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610b0d9190810190611bcf565b8382815181101515610b1b57fe5b906020019060200201819052508373ffffffffffffffffffffffffffffffffffffffff1663846719e0826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610b7d9190611fbd565b602060405180830381600087803b158015610b9757600080fd5b505af1158015610bab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610bcf9190810190611b13565b73ffffffffffffffffffffffffffffffffffffffff16639c981fcb8a6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610c239190611ffa565b600060405180830381600087803b158015610c3d57600080fd5b505af1158015610c51573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610c7a9190810190611bcf565b8282815181101515610c8857fe5b90602001906020020181905250808060010191505061091856","5b8282975097505050505050509250929050565b60008060008060008061100194508473ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280600d81526020017f50726f706f73616c5469746c65000000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610d4d9190611fd8565b602060405180830381600087803b158015610d6757600080fd5b505af1158015610d7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d9f9190810190611b3c565b9350600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610de0576000549550611164565b610de9896115aa565b925060025483141561115e578373ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610e5957600080fd5b505af1158015610e6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e919190810190611b13565b91508173ffffffffffffffffffffffffffffffffffffffff1663e942b5166040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610ee690612196565b600060405180830381600087803b158015610f0057600080fd5b505af1158015610f14573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b5168a6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610f6d91906120f7565b600060405180830381600087803b158015610f8757600080fd5b505af1158015610f9b573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b516896040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610ff4919061212c565b600060405180830381600087803b15801561100e57600080fd5b505af1158015611022573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b516886040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161107b9190612161565b600060405180830381600087803b15801561109557600080fd5b505af11580156110a9573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff166331afac36836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161110291906120c9565b602060405180830381600087803b15801561111c57600080fd5b505af1158015611130573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111549190810190611b65565b9050809550611164565b60035495505b50505050509392505050565b600080600061100191508173ffffffffffffffffffffffffffffffffffffffff166356004b6a6040805190810160405280600d81526020017f50726f706f73616c5469746c65000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016112049190612053565b602060405180830381600087803b15801561121e57600080fd5b505af1158015611232573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112569190810190611b65565b9050809250505090565b6000806000806112db6040805190810160405280600d81526020017f50726f706f73616c5469746c65000000000000000000000000000000000000008152506040805190810160405280600581526020017f5469746c650000000000000000000000000000000000000000000000000000008152508761178e565b925092508273ffffffffffffffffffffffffffffffffffffffff166328bb2117836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611334919061209b565b602060405180830381600087803b15801561134e57600080fd5b505af1158015611362573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113869190810190611b65565b9050600081131561139b5760015493506113a1565b60005493505b505050919050565b6000806000806114596040805190810160405280600381526020017f54414700000000000000000000000000000000000000000000000000000000008152506040805190810160405280600581526020017f496e6465780000000000000000000000000000000000000000000000000000008152506040805190810160405280600381526020017f544147000000000000000000000000000000000000000000000000000000000081525061178e565b925092508273ffffffffffffffffffffffffffffffffffffffff1663e8434e39836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016114b2919061209b565b602060405180830381600087803b1580156114cc57600080fd5b505af11580156114e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115049190810190611aea565b90508073ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561156a57600080fd5b505af115801561157e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115a29190810190611b65565b935050505090565b6000806000806116256040805190810160405280600d81526020017f50726f706f73616c5469746c65000000000000000000000000000000000000008152506040805190810160405280600581526020017f5469746c650000000000000000000000000000000000000000000000000000008152508761178e565b925092508273ffffffffffffffffffffffffffffffffffffffff1663e8434e39836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161167e919061209b565b602060405180830381600087803b15801561169857600080fd5b505af11580156116ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116d09190810190611aea565b905060008173ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561173857600080fd5b505af115801561174c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506117709190810190611b65565b1415611780576002549350611786565b60035493505b505050919050565b600080600080600061100192508273ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280600d81526020017f50726f706f73616c5469746c65000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016118259190611fd8565b602060405180830381600087803b15801561183f57600080fd5b505af1158015611853573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506118779190810190611b3c565b91508173ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156118dd57600080fd5b505af11580156118f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506119159190810190611ac1565b90508073ffffffffffffffffffffffffffffffffffffffff1663cd30a1d188886040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161196e92919061201c565b600060405180830381600087803b15801561198857600080fd5b505af115801561199c573d6000803e3d6000fd5b50505050818194509450505050935093915050565b60006119bd8251612287565b905092915050565b60006119d18251612299565b905092915050565b60006119e582516122ab565b905092915050565b60006119f982516122bd565b905092915050565b6000611a0d82516122cf565b905092915050565b600082601f8301121515611a2857600080fd5b8135611a3b611a36826121f6565b6121c9565b91508082526020830160208301858383011115611a5757600080fd5b611a628382846122fd565b50505092915050565b600082601f8301121515611a7e57600080fd5b8151611a91611a8c826121f6565b6121c9565b91508082526020830160208301858383011115611aad57600080fd5b611ab883828461230c565b50505092915050565b600060208284031215611ad357600080fd5b6000611ae1848285016119b1565b91505092915050565b600060208284031215611afc57600080fd5b6000611b0a848285016119c5565b91505092915050565b600060208284031215611b2557600080fd5b6000611b33848285016119d9565b91505092915050565b600060208284031215611b4e57600080fd5b6000611b5c848285016119ed565b91505092915050565b600060208284031215611b7757600080fd5b6000611b8584828501611a01565b91505092915050565b600060208284031215611ba057600080fd5b600082013567ffffffffffffffff811115611bba57600080fd5b611bc684828501611a15565b91505092915050565b600060208284031215611be157600080fd5b600082015167ffffffffffffffff811115611bfb57600080fd5b611c0784828501611a6b565b91505092915050565b60008060408385031215611c2357600080fd5b600083013567ffffffffffffffff811115611c3d57600080fd5b611c4985828601611a15565b925050602083013567ffffffffffffffff811115611c6657600080fd5b611c7285828601611a15565b9150509250929050565b600080600060608486031215611c9157600080fd5b600084013567ffffffffffffffff8111","15611cab57600080fd5b611cb786828701611a15565b935050602084013567ffffffffffffffff811115611cd457600080fd5b611ce086828701611a15565b925050604084013567ffffffffffffffff811115611cfd57600080fd5b611d0986828701611a15565b9150509250925092565b6000611d1e8261222f565b80845260208401935083602082028501611d3785612222565b60005b84811015611d70578383038852611d52838351611de4565b9250611d5d82612250565b9150602088019750600181019050611d3a565b508196508694505050505092915050565b611d8a816122d9565b82525050565b611d99816122eb565b82525050565b611da88161227d565b82525050565b6000611db982612245565b808452611dcd81602086016020860161230c565b611dd68161233f565b602085010191505092915050565b6000611def8261223a565b808452611e0381602086016020860161230c565b611e0c8161233f565b602085010191505092915050565b6000601f82527f5469746c652c42656c6f6e675573657249442c446561646c696e6554696d65006020830152604082019050919050565b6000600382527f54414700000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600582527f5469746c650000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600c82527f42656c6f6e6755736572494400000000000000000000000000000000000000006020830152604082019050919050565b6000600c82527f446561646c696e6554696d6500000000000000000000000000000000000000006020830152604082019050919050565b6000600582527f496e6465780000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006020820190508181036000830152611f7e8184611d13565b905092915050565b60006040820190508181036000830152611fa08185611d13565b90508181036020830152611fb48184611d13565b90509392505050565b6000602082019050611fd26000830184611d9f565b92915050565b60006020820190508181036000830152611ff28184611de4565b905092915050565b600060208201905081810360008301526120148184611dae565b905092915050565b600060408201905081810360008301526120368185611dae565b9050818103602083015261204a8184611dae565b90509392505050565b6000606082019050818103600083015261206d8184611de4565b9050818103602083015261208081611f2d565b9050818103604083015261209381611e1a565b905092915050565b600060408201905081810360008301526120b481611e51565b90506120c36020830184611d81565b92915050565b600060408201905081810360008301526120e281611e51565b90506120f16020830184611d90565b92915050565b6000604082019050818103600083015261211081611e88565b905081810360208301526121248184611dae565b905092915050565b6000604082019050818103600083015261214581611ebf565b905081810360208301526121598184611dae565b905092915050565b6000604082019050818103600083015261217a81611ef6565b9050818103602083015261218e8184611dae565b905092915050565b600060408201905081810360008301526121af81611f2d565b905081810360208301526121c281611e51565b9050919050565b6000604051905081810181811067ffffffffffffffff821117156121ec57600080fd5b8060405250919050565b600067ffffffffffffffff82111561220d57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006122928261225d565b9050919050565b60006122a48261225d565b9050919050565b60006122b68261225d565b9050919050565b60006122c88261225d565b9050919050565b6000819050919050565b60006122e48261225d565b9050919050565b60006122f68261225d565b9050919050565b82818337600083830152505050565b60005b8381101561232a57808201518184015260208101905061230f565b83811115612339576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820e4ff34bd5c33ce21b3778992aae08e159b2111dd85476188a0097db1466af0756c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","90600190039081610c9a5790505b509150600090505b8273ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610d1b57600080fd5b505af1158015610d2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d539190810190611b65565b811215610ed4578273ffffffffffffffffffffffffffffffffffffffff16633dd2b614826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610daf9190611fbd565b602060405180830381600087803b158015610dc957600080fd5b505af1158015610ddd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e019190810190611b13565b73ffffffffffffffffffffffffffffffffffffffff16639bca41e8886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610e559190611ffa565b600060405180830381600087803b158015610e6f57600080fd5b505af1158015610e83573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610eac9190810190611bcf565b8282815181101515610eba57fe5b906020019060200201819052508080600101915050610cb7565b81955050505050509392505050565b600080600080610f936040805190810160405280600381526020017f54414700000000000000000000000000000000000000000000000000000000008152506040805190810160405280600581526020017f496e6465780000000000000000000000000000000000000000000000000000008152506040805190810160405280600381526020017f544147000000000000000000000000000000000000000000000000000000000081525061178e565b925092508273ffffffffffffffffffffffffffffffffffffffff1663d8ac5957836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610fec919061209b565b602060405180830381600087803b15801561100657600080fd5b505af115801561101a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061103e9190810190611aea565b90508073ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156110a457600080fd5b505af11580156110b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110dc9190810190611b65565b935050505090565b6060806000806000606080600061119b6040805190810160405280600d81526020017f50726f706f73616c5469746c65000000000000000000000000000000000000008152506040805190810160405280600581526020017f496e6465780000000000000000000000000000000000000000000000000000008152506040805190810160405280600381526020017f544147000000000000000000000000000000000000000000000000000000000081525061178e565b955095508573ffffffffffffffffffffffffffffffffffffffff1663d8ac5957866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016111f4919061209b565b602060405180830381600087803b15801561120e57600080fd5b505af1158015611222573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112469190810190611aea565b93508373ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156112ac57600080fd5b505af11580156112c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112e49190810190611b65565b60405190808252806020026020018201604052801561131757816020015b60608152602001906001900390816113025790505b5092508373ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561137e57600080fd5b505af1158015611392573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113b69190810190611b65565b6040519080825280602002602001820160405280156113e957816020015b60608152602001906001900390816113d45790505b509150600090505b8373ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561145557600080fd5b505af1158015611469573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061148d9190810190611b65565b81121561177b578373ffffffffffffffffffffffffffffffffffffffff16633dd2b614826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016114e99190611fbd565b602060405180830381600087803b15801561150357600080fd5b505af1158015611517573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061153b9190810190611b13565b73ffffffffffffffffffffffffffffffffffffffff16639bca41e88b6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161158f9190611ffa565b600060405180830381600087803b1580156115a957600080fd5b505af11580156115bd573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506115e69190810190611bcf565b83828151811015156115f457fe5b906020019060200201819052508373ffffffffffffffffffffffffffffffffffffffff16633dd2b614826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016116569190611fbd565b602060405180830381600087803b15801561167057600080fd5b505af1158015611684573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116a89190810190611b13565b73ffffffffffffffffffffffffffffffffffffffff16639bca41e88a6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016116fc9190611ffa565b600060405180830381600087803b15801561171657600080fd5b505af115801561172a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506117539190810190611bcf565b828281518110151561176157fe5b9060200190602002018190525080806001019150506113f1565b8282975097505050505050509250929050565b600080600080600061100192508273ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600d81526020017f50726f706f73616c5469746c65000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016118259190611fd8565b602060405180830381600087803b15801561183f57600080fd5b505af1158015611853573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506118779190810190611b3c565b91508173ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156118dd57600080fd5b505af11580156118f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506119159190810190611ac1565b90508073ffffffffffffffffffffffffffffffffffffffff1663ae763db588886040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161196e92919061201c565b600060405180830381600087803b15801561198857600080fd5b505af115801561199c573d6000803e3d6000fd5b50505050818194509450505050935093915050565b60006119bd8251612287565b905092915050565b60006119d18251612299565b905092915050565b60006119e582516122ab565b905092915050565b60006119f982516122bd565b905092915050565b6000611a0d82516122cf565b905092915050565b600082601f8301121515611a2857600080fd5b8135611a3b611a36826121f6565b6121c9565b91508082526020830160208301858383011115611a5757600080fd5b611a628382846122fd565b50505092915050565b600082601f8301121515611a7e57600080fd5b8151611a91611a8c826121f6565b6121c9565b91508082526020830160208301858383011115611aad57600080fd5b611ab883828461230c565b50505092915050565b600060208284031215611ad357600080fd5b6000611ae1848285016119b1565b91505092915050565b600060208284031215611afc57600080fd5b6000611b0a848285016119c5565b91505092915050565b600060208284031215611b2557600080fd5b6000611b33848285016119d9565b91505092915050565b600060208284031215611b4e57600080fd5b6000611b5c848285016119ed565b91505092915050565b600060208284031215611b7757600080fd5b6000611b8584828501611a01565b91505092915050565b600060208284031215611ba057600080fd5b600082013567ffffffffffffffff811115611bba57600080fd5b611bc684828501611a15565b91505092915050565b600060208284031215611be157600080fd5b600082015167ffffffffffffffff811115611bfb57600080fd5b611c0784828501611a6b565b91505092915050565b60008060408385031215611c2357600080fd5b600083013567ffffffffffffffff811115611c3d57600080fd5b611c4985828601611a15565b925050602083013567ffffffffffffffff811115611c6657600080fd5b611c7285828601611a15565b9150509250929050565b600080600060608486031215611c9157600080fd5b600084013567ffffffffffffffff8111","15611cab57600080fd5b611cb786828701611a15565b935050602084013567ffffffffffffffff811115611cd457600080fd5b611ce086828701611a15565b925050604084013567ffffffffffffffff811115611cfd57600080fd5b611d0986828701611a15565b9150509250925092565b6000611d1e8261222f565b80845260208401935083602082028501611d3785612222565b60005b84811015611d70578383038852611d52838351611de4565b9250611d5d82612250565b9150602088019750600181019050611d3a565b508196508694505050505092915050565b611d8a816122d9565b82525050565b611d99816122eb565b82525050565b611da88161227d565b82525050565b6000611db982612245565b808452611dcd81602086016020860161230c565b611dd68161233f565b602085010191505092915050565b6000611def8261223a565b808452611e0381602086016020860161230c565b611e0c8161233f565b602085010191505092915050565b6000600382527f54414700000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600c82527f446561646c696e6554696d6500000000000000000000000000000000000000006020830152604082019050919050565b6000601f82527f5469746c652c42656c6f6e675573657249442c446561646c696e6554696d65006020830152604082019050919050565b6000600582527f5469746c650000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600582527f496e6465780000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600c82527f42656c6f6e6755736572494400000000000000000000000000000000000000006020830152604082019050919050565b60006020820190508181036000830152611f7e8184611d13565b905092915050565b60006040820190508181036000830152611fa08185611d13565b90508181036020830152611fb48184611d13565b90509392505050565b6000602082019050611fd26000830184611d9f565b92915050565b60006020820190508181036000830152611ff28184611de4565b905092915050565b600060208201905081810360008301526120148184611dae565b905092915050565b600060408201905081810360008301526120368185611dae565b9050818103602083015261204a8184611dae565b90509392505050565b6000606082019050818103600083015261206d8184611de4565b9050818103602083015261208081611ef6565b9050818103604083015261209381611e88565b905092915050565b600060408201905081810360008301526120b481611e1a565b90506120c36020830184611d81565b92915050565b600060408201905081810360008301526120e281611e1a565b90506120f16020830184611d90565b92915050565b6000604082019050818103600083015261211081611e51565b905081810360208301526121248184611dae565b905092915050565b6000604082019050818103600083015261214581611ebf565b905081810360208301526121598184611dae565b905092915050565b6000604082019050818103600083015261217a81611ef6565b9050818103602083015261218d81611e1a565b9050919050565b600060408201905081810360008301526121ad81611f2d565b905081810360208301526121c18184611dae565b905092915050565b6000604051905081810181811067ffffffffffffffff821117156121ec57600080fd5b8060405250919050565b600067ffffffffffffffff82111561220d57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006122928261225d565b9050919050565b60006122a48261225d565b9050919050565b60006122b68261225d565b9050919050565b60006122c88261225d565b9050919050565b6000819050919050565b60006122e48261225d565b9050919050565b60006122f68261225d565b9050919050565b82818337600083830152505050565b60005b8381101561232a57808201518184015260208101905061230f565b83811115612339576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820d5680ccf639c1944510b95fd67f8c798bd09b6bafa2bc7e902bdbf7999e2d22c6c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"key_name\",\"type\":\"string\"},{\"name\":\"key_value\",\"type\":\"string\"},{\"name\":\"get_name\",\"type\":\"string\"}],\"name\":\"select\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"get_name\",\"type\":\"string\"},{\"name\":\"get_time\",\"type\":\"string\"}],\"name\":\"show\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"belong_to\",\"type\":\"string\"},{\"name\":\"time\",\"type\":\"string\"}],\"name\":\"insert\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createProposalTitle\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"title\",\"type\":\"string\"}],\"name\":\"remove\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getnums\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"title\",\"type\":\"string\"}],\"name\":\"check\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"a\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"string\"}],\"name\":\"LogIncrement\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_SELECT = "select";

    public static final String FUNC_SHOW = "show";

    public static final String FUNC_INSERT = "insert";

    public static final String FUNC_CREATEPROPOSALTITLE = "createProposalTitle";

    public static final String FUNC_REMOVE = "remove";

    public static final String FUNC_GETNUMS = "getnums";

    public static final String FUNC_CHECK = "check";

    public static final Event LOGINCREMENT_EVENT = new Event("LogIncrement", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}));
    ;

    protected ProposalTitle(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt select(String key_name, String key_value, String get_name) {
        final Function function = new Function(
                FUNC_SELECT, 
                Arrays.<Type>asList(new Utf8String(key_name),
                new Utf8String(key_value),
                new Utf8String(get_name)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] select(String key_name, String key_value, String get_name, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SELECT, 
                Arrays.<Type>asList(new Utf8String(key_name),
                new Utf8String(key_value),
                new Utf8String(get_name)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSelect(String key_name, String key_value, String get_name) {
        final Function function = new Function(
                FUNC_SELECT, 
                Arrays.<Type>asList(new Utf8String(key_name),
                new Utf8String(key_value),
                new Utf8String(get_name)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getSelectInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple1<List<String>> getSelectOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<String>>(

                convertToNative((List<Utf8String>) results.get(0).getValue())
                );
    }

    public TransactionReceipt show(String get_name, String get_time) {
        final Function function = new Function(
                FUNC_SHOW, 
                Arrays.<Type>asList(new Utf8String(get_name),
                new Utf8String(get_time)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] show(String get_name, String get_time, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SHOW, 
                Arrays.<Type>asList(new Utf8String(get_name),
                new Utf8String(get_time)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForShow(String get_name, String get_time) {
        final Function function = new Function(
                FUNC_SHOW, 
                Arrays.<Type>asList(new Utf8String(get_name),
                new Utf8String(get_time)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getShowInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SHOW, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple2<List<String>, List<String>> getShowOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SHOW, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<List<String>, List<String>>(

                convertToNative((List<Utf8String>) results.get(0).getValue()), 
                convertToNative((List<Utf8String>) results.get(1).getValue())
                );
    }

    public TransactionReceipt insert(String title, String belong_to, String time) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new Utf8String(title),
                new Utf8String(belong_to),
                new Utf8String(time)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] insert(String title, String belong_to, String time, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new Utf8String(title),
                new Utf8String(belong_to),
                new Utf8String(time)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInsert(String title, String belong_to, String time) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new Utf8String(title),
                new Utf8String(belong_to),
                new Utf8String(time)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getInsertInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getInsertOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt createProposalTitle() {
        final Function function = new Function(
                FUNC_CREATEPROPOSALTITLE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] createProposalTitle(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEPROPOSALTITLE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateProposalTitle() {
        final Function function = new Function(
                FUNC_CREATEPROPOSALTITLE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getCreateProposalTitleOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEPROPOSALTITLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt remove(String title) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new Utf8String(title)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] remove(String title, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new Utf8String(title)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemove(String title) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new Utf8String(title)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getRemoveInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getRemoveOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt getnums() {
        final Function function = new Function(
                FUNC_GETNUMS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] getnums(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETNUMS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetnums() {
        final Function function = new Function(
                FUNC_GETNUMS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getGetnumsOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETNUMS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt check(String title) {
        final Function function = new Function(
                FUNC_CHECK, 
                Arrays.<Type>asList(new Utf8String(title)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] check(String title, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CHECK, 
                Arrays.<Type>asList(new Utf8String(title)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCheck(String title) {
        final Function function = new Function(
                FUNC_CHECK, 
                Arrays.<Type>asList(new Utf8String(title)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getCheckInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CHECK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getCheckOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CHECK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public List<LogIncrementEventResponse> getLogIncrementEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(LOGINCREMENT_EVENT, transactionReceipt);
        ArrayList<LogIncrementEventResponse> responses = new ArrayList<LogIncrementEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            LogIncrementEventResponse typedResponse = new LogIncrementEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.a = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.b = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeLogIncrementEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGINCREMENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeLogIncrementEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGINCREMENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static ProposalTitle load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new ProposalTitle(contractAddress, client, credential);
    }

    public static ProposalTitle deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(ProposalTitle.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class LogIncrementEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger a;

        public String b;
    }
}
