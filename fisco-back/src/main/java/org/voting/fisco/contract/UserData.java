package org.voting.fisco.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class UserData extends Contract {
    public static final String[] BINARY_ARRAY = {"","6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610bef9190611ca4565b600060405180830381600087803b158015610c0957600080fd5b505af1158015610c1d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610c46919081019061181c565b93505b505050949350505050565b60608060008060006060806000610cd66040805190810160405280600881526020017f55736572446174610000000000000000000000000000000000000000000000008152506040805190810160405280600281526020017f49440000000000000000000000000000000000000000000000000000000000008152508b6113db565b955095508573ffffffffffffffffffffffffffffffffffffffff1663e8434e398a876040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610d31929190611cc6565b602060405180830381600087803b158015610d4b57600080fd5b505af1158015610d5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d839190810190611737565b93508373ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610de957600080fd5b505af1158015610dfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e2191908101906117b2565b604051908082528060200260200182016040528015610e5457816020015b6060815260200190600190039081610e3f5790505b5092508373ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610ebb57600080fd5b505af1158015610ecf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ef391908101906117b2565b604051908082528060200260200182016040528015610f2657816020015b6060815260200190600190039081610f115790505b509150600090505b8373ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610f9257600080fd5b505af1158015610fa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610fca91908101906117b2565b8112156112b4578373ffffffffffffffffffffffffffffffffffffffff1663846719e0826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016110269190611c4c565b602060405180830381600087803b15801561104057600080fd5b505af1158015611054573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110789190810190611760565b73ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016110ca90611e2f565b600060405180830381600087803b1580156110e457600080fd5b505af11580156110f8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250611121919081019061181c565b838281518110151561112f57fe5b906020019060200201819052508373ffffffffffffffffffffffffffffffffffffffff1663846719e0826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016111919190611c4c565b602060405180830381600087803b1580156111ab57600080fd5b505af11580156111bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111e39190810190611760565b73ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161123590611dda565b600060405180830381600087803b15801561124f57600080fd5b505af1158015611263573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061128c919081019061181c565b828281518110151561129a57fe5b906020019060200201819052508080600101915050610f2e565b828297509750505050505050915091565b60008060008061130b6040805190810160405280600881526020017f557365724461746100000000000000000000000000000000000000000000000081525087876113db565b925092508273ffffffffffffffffffffffffffffffffffffffff166328bb211788846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611366929190611cc6565b602060405180830381600087803b15801561138057600080fd5b505af1158015611394573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113b891908101906117b2565b905060008113156113cd5760015493506113d1565b8093505b5050509392505050565b600080600080600061100192508273ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280600881526020017f55736572446174610000000000000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016114729190611c82565b602060405180830381600087803b15801561148c57600080fd5b505af11580156114a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114c49190810190611789565b91508173ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561152a57600080fd5b505af115801561153e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611562919081019061170e565b90508073ffffffffffffffffffffffffffffffffffffffff1663cd30a1d188886040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016115bb929190611d26565b600060405180830381600087803b1580156115d557600080fd5b505af11580156115e9573d6000803e3d6000fd5b50505050818194509450505050935093915050565b600061160a8251611f42565b905092915050565b600061161e8251611f54565b905092915050565b60006116328251611f66565b905092915050565b60006116468251611f78565b905092915050565b600061165a8251611f8a565b905092915050565b600082601f830112151561167557600080fd5b813561168861168382611eb1565b611e84565b915080825260208301602083018583830111156116a457600080fd5b6116af838284611fca565b50505092915050565b600082601f83011215156116cb57600080fd5b81516116de6116d982611eb1565b611e84565b915080825260208301602083018583830111156116fa57600080fd5b611705838284611fd9565b50505092915050565b60006020828403121561172057600080fd5b600061172e848285016115fe565b91505092915050565b60006020828403121561174957600080fd5b600061175784828501611612565b91505092915050565b60006020828403121561177257600080fd5b600061178084828501611626565b91505092915050565b60006020828403121561179b57600080fd5b60006117a98482850161163a565b91505092915050565b6000602082840312156117c457600080fd5b60006117d28482850161164e565b91505092915050565b6000602082840312156117ed57600080fd5b600082013567ffffffffffffffff81111561180757600080fd5b61181384828501611662565b91505092915050565b60006020828403121561182e57600080fd5b600082015167ffffffffffffffff81111561184857600080fd5b611854848285016116b8565b91505092915050565b6000806040838503121561187057600080fd5b600083013567ffffffffffffffff81111561188a57600080fd5b61189685828601611662565b925050602083013567ffffffffffffffff8111156118b357600080fd5b6118bf85828601611662565b9150509250929050565b6000806000606084860312156118de57600080fd5b600084013567ffffffffffffffff8111156118f857600080fd5b61190486828701611662565b935050602084013567ffffffffffffffff81111561192157600080fd5b61192d86828701611662565b925050604084013567ffffffffffffffff81111561194a57600080fd5b61195686828701611662565b9150509250925092565b6000806000806080858703121561197657600080fd5b600085013567ffffffffffffffff81111561199057600080fd5b61199c87828801611662565b945050602085013567ffffffffffffffff8111156119b957600080fd5b6119c587828801611662565b935050604085013567ffffffffffffffff8111156119e257600080fd5b6119ee87828801611662565b925050606085013567ffffffffffffffff811115611a0b57600080fd5b611a1787828801611662565b91505092959194509250565b6000611a2e82611eea565b80845260208401935083602082028501611a4785611edd565b60005b84811015611a80578383038852611a62838351611b03565b9250611a6d82611f0b565b9150602088019750600181019050611a4a565b508196508694505050505092915050565b611a9a81611f94565b82525050565b611aa981611fa6565b82525050565b611ab881611f38565b82525050565b611ac781611fb8565b82525050565b6000611ad882611f00565b808452611aec816020860160208601611fd9565b611af58161200c565b602085010191505092915050565b6000611b0e82611ef5565b808452611b22816020860160208601611fd9565b611b2b8161200c565b602085010191505092915050565b6000600282527f49440000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600b82527f566f74656442616c6c6f740000000000000000000000000000000000000000006020830152604082019050919050565b6000601682527f566f7465645469746c","652c566f74656442616c6c6f74000000000000000000006020830152604082019050919050565b6000600a82527f566f7465645469746c65000000000000000000000000000000000000000000006020830152604082019050919050565b60006040820190508181036000830152611c2f8185611a23565b90508181036020830152611c438184611a23565b90509392505050565b6000602082019050611c616000830184611aaf565b92915050565b6000602082019050611c7c6000830184611abe565b92915050565b60006020820190508181036000830152611c9c8184611b03565b905092915050565b60006020820190508181036000830152611cbe8184611acd565b905092915050565b60006040820190508181036000830152611ce08185611acd565b9050611cef6020830184611a91565b9392505050565b60006040820190508181036000830152611d108185611acd565b9050611d1f6020830184611aa0565b9392505050565b60006040820190508181036000830152611d408185611acd565b90508181036020830152611d548184611acd565b90509392505050565b60006060820190508181036000830152611d778184611b03565b90508181036020830152611d8a81611b39565b90508181036040830152611d9d81611ba7565b905092915050565b60006040820190508181036000830152611dbe81611b39565b90508181036020830152611dd28184611acd565b905092915050565b60006020820190508181036000830152611df381611b70565b9050919050565b60006040820190508181036000830152611e1381611b70565b90508181036020830152611e278184611acd565b905092915050565b60006020820190508181036000830152611e4881611bde565b9050919050565b60006040820190508181036000830152611e6881611bde565b90508181036020830152611e7c8184611acd565b905092915050565b6000604051905081810181811067ffffffffffffffff82111715611ea757600080fd5b8060405250919050565b600067ffffffffffffffff821115611ec857600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611f4d82611f18565b9050919050565b6000611f5f82611f18565b9050919050565b6000611f7182611f18565b9050919050565b6000611f8382611f18565b9050919050565b6000819050919050565b6000611f9f82611f18565b9050919050565b6000611fb182611f18565b9050919050565b6000611fc382611f38565b9050919050565b82818337600083830152505050565b60005b83811015611ff7578082015181840152602081019050611fdc565b83811115612006576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a7230582065f91dea5e40bbdb87a3f0ff3bb02563f62394580fa059455cfb2d1fea66704a6c6578706572696d656e74616cf50037608060405234801561001057600080fd5b506105c1806100206000396000f300608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680639201de551461005c578063cfb5192814610106578063f76f950e1461018b575b600080fd5b34801561006857600080fd5b5061008b6004803603810190808035600019169060200190929190505050610231565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100cb5780820151818401526020810190506100b0565b50505050905090810190601f1680156100f85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561011257600080fd5b5061016d600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610430565b60405180826000191660001916815260200191505060405180910390f35b34801561019757600080fd5b506101b66004803603810190808035906020019092919050505061043e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101f65780820151818401526020810190506101db565b50505050905090810190601f1680156102235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60608060008060006060600060206040519080825280601f01601f1916602001820160405280156102715781602001602082028038833980820191505090505b50955060009450600093505b602084101561033b578360080260020a886001900402600102925060007f010000000000000000000000000000000000000000000000000000000000000002837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614151561032e578286868151811015156102f557fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535084806001019550505b838060010194505061027d565b846040519080825280601f01601f19166020018201604052801561036e5781602001602082028038833980820191505090505b509150600090505b8481101561042257858181518110151561038c57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000282828151811015156103e557fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050610376565b819650505050505050919050565b600060208201519050919050565b6060600080606060008086141561048c576040805190810160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250945061058c565b8593505b6000841415156104b6578280600101935050600a848115156104ae57fe5b049350610490565b826040519080825280601f01601f1916602001820160405280156104e95781602001602082028038833980820191505090505b5091506001830390505b60008614151561058857600a8681151561050957fe5b066030017f01000000000000000000000000000000000000000000000000000000000000000282828060019003935081518110151561054457fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8681151561058057fe5b0495506104f3565b8194505b505050509190505600a165627a7a723058209c093563a3fe7d2685274ae2016ed0ff5deacd232088ea3703ea29d8bad347f30029"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","610bc19190611d5d565b602060405180830381600087803b158015610bdb57600080fd5b505af1158015610bef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610c1391908101906117b2565b90507f5ad9dcd8e047426b90743e1f1d1867596c4c461cbc5005014246f5b9a7a96caa81604051610c449190611c4c565b60405180910390a1809250505090565b60608060008060006060806000610cd66040805190810160405280600881526020017f55736572446174610000000000000000000000000000000000000000000000008152506040805190810160405280600281526020017f49440000000000000000000000000000000000000000000000000000000000008152508b6113db565b955095508573ffffffffffffffffffffffffffffffffffffffff1663d8ac59578a876040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610d31929190611cc6565b602060405180830381600087803b158015610d4b57600080fd5b505af1158015610d5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d839190810190611737565b93508373ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610de957600080fd5b505af1158015610dfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e2191908101906117b2565b604051908082528060200260200182016040528015610e5457816020015b6060815260200190600190039081610e3f5790505b5092508373ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610ebb57600080fd5b505af1158015610ecf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ef391908101906117b2565b604051908082528060200260200182016040528015610f2657816020015b6060815260200190600190039081610f115790505b509150600090505b8373ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610f9257600080fd5b505af1158015610fa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610fca91908101906117b2565b8112156112b4578373ffffffffffffffffffffffffffffffffffffffff16633dd2b614826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016110269190611c4c565b602060405180830381600087803b15801561104057600080fd5b505af1158015611054573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110789190810190611760565b73ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016110ca90611e2f565b600060405180830381600087803b1580156110e457600080fd5b505af11580156110f8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250611121919081019061181c565b838281518110151561112f57fe5b906020019060200201819052508373ffffffffffffffffffffffffffffffffffffffff16633dd2b614826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016111919190611c4c565b602060405180830381600087803b1580156111ab57600080fd5b505af11580156111bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111e39190810190611760565b73ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161123590611dda565b600060405180830381600087803b15801561124f57600080fd5b505af1158015611263573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061128c919081019061181c565b828281518110151561129a57fe5b906020019060200201819052508080600101915050610f2e565b828297509750505050505050915091565b60008060008061130b6040805190810160405280600881526020017f557365724461746100000000000000000000000000000000000000000000000081525087876113db565b925092508273ffffffffffffffffffffffffffffffffffffffff166309ff42f088846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611366929190611cc6565b602060405180830381600087803b15801561138057600080fd5b505af1158015611394573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113b891908101906117b2565b905060008113156113cd5760015493506113d1565b8093505b5050509392505050565b600080600080600061100192508273ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600881526020017f55736572446174610000000000000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016114729190611c82565b602060405180830381600087803b15801561148c57600080fd5b505af11580156114a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114c49190810190611789565b91508173ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561152a57600080fd5b505af115801561153e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611562919081019061170e565b90508073ffffffffffffffffffffffffffffffffffffffff1663ae763db588886040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016115bb929190611d26565b600060405180830381600087803b1580156115d557600080fd5b505af11580156115e9573d6000803e3d6000fd5b50505050818194509450505050935093915050565b600061160a8251611f42565b905092915050565b600061161e8251611f54565b905092915050565b60006116328251611f66565b905092915050565b60006116468251611f78565b905092915050565b600061165a8251611f8a565b905092915050565b600082601f830112151561167557600080fd5b813561168861168382611eb1565b611e84565b915080825260208301602083018583830111156116a457600080fd5b6116af838284611fca565b50505092915050565b600082601f83011215156116cb57600080fd5b81516116de6116d982611eb1565b611e84565b915080825260208301602083018583830111156116fa57600080fd5b611705838284611fd9565b50505092915050565b60006020828403121561172057600080fd5b600061172e848285016115fe565b91505092915050565b60006020828403121561174957600080fd5b600061175784828501611612565b91505092915050565b60006020828403121561177257600080fd5b600061178084828501611626565b91505092915050565b60006020828403121561179b57600080fd5b60006117a98482850161163a565b91505092915050565b6000602082840312156117c457600080fd5b60006117d28482850161164e565b91505092915050565b6000602082840312156117ed57600080fd5b600082013567ffffffffffffffff81111561180757600080fd5b61181384828501611662565b91505092915050565b60006020828403121561182e57600080fd5b600082015167ffffffffffffffff81111561184857600080fd5b611854848285016116b8565b91505092915050565b6000806040838503121561187057600080fd5b600083013567ffffffffffffffff81111561188a57600080fd5b61189685828601611662565b925050602083013567ffffffffffffffff8111156118b357600080fd5b6118bf85828601611662565b9150509250929050565b6000806000606084860312156118de57600080fd5b600084013567ffffffffffffffff8111156118f857600080fd5b61190486828701611662565b935050602084013567ffffffffffffffff81111561192157600080fd5b61192d86828701611662565b925050604084013567ffffffffffffffff81111561194a57600080fd5b61195686828701611662565b9150509250925092565b6000806000806080858703121561197657600080fd5b600085013567ffffffffffffffff81111561199057600080fd5b61199c87828801611662565b945050602085013567ffffffffffffffff8111156119b957600080fd5b6119c587828801611662565b935050604085013567ffffffffffffffff8111156119e257600080fd5b6119ee87828801611662565b925050606085013567ffffffffffffffff811115611a0b57600080fd5b611a1787828801611662565b91505092959194509250565b6000611a2e82611eea565b80845260208401935083602082028501611a4785611edd565b60005b84811015611a80578383038852611a62838351611b03565b9250611a6d82611f0b565b9150602088019750600181019050611a4a565b508196508694505050505092915050565b611a9a81611f94565b82525050565b611aa981611fa6565b82525050565b611ab881611f38565b82525050565b611ac781611fb8565b82525050565b6000611ad882611f00565b808452611aec816020860160208601611fd9565b611af58161200c565b602085010191505092915050565b6000611b0e82611ef5565b808452611b22816020860160208601611fd9565b611b2b8161200c565b602085010191505092915050565b6000601682527f566f7465645469746c652c566f74656442616c6c6f74000000000000000000006020830152604082019050919050565b6000600282527f49440000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600b82527f566f74656442616c6c","6f740000000000000000000000000000000000000000006020830152604082019050919050565b6000600a82527f566f7465645469746c65000000000000000000000000000000000000000000006020830152604082019050919050565b60006040820190508181036000830152611c2f8185611a23565b90508181036020830152611c438184611a23565b90509392505050565b6000602082019050611c616000830184611aaf565b92915050565b6000602082019050611c7c6000830184611abe565b92915050565b60006020820190508181036000830152611c9c8184611b03565b905092915050565b60006020820190508181036000830152611cbe8184611acd565b905092915050565b60006040820190508181036000830152611ce08185611acd565b9050611cef6020830184611a91565b9392505050565b60006040820190508181036000830152611d108185611acd565b9050611d1f6020830184611aa0565b9392505050565b60006040820190508181036000830152611d408185611acd565b90508181036020830152611d548184611acd565b90509392505050565b60006060820190508181036000830152611d778184611b03565b90508181036020830152611d8a81611b70565b90508181036040830152611d9d81611b39565b905092915050565b60006040820190508181036000830152611dbe81611b70565b90508181036020830152611dd28184611acd565b905092915050565b60006020820190508181036000830152611df381611ba7565b9050919050565b60006040820190508181036000830152611e1381611ba7565b90508181036020830152611e278184611acd565b905092915050565b60006020820190508181036000830152611e4881611bde565b9050919050565b60006040820190508181036000830152611e6881611bde565b90508181036020830152611e7c8184611acd565b905092915050565b6000604051905081810181811067ffffffffffffffff82111715611ea757600080fd5b8060405250919050565b600067ffffffffffffffff821115611ec857600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611f4d82611f18565b9050919050565b6000611f5f82611f18565b9050919050565b6000611f7182611f18565b9050919050565b6000611f8382611f18565b9050919050565b6000819050919050565b6000611f9f82611f18565b9050919050565b6000611fb182611f18565b9050919050565b6000611fc382611f38565b9050919050565b82818337600083830152505050565b60005b83811015611ff7578082015181840152602081019050611fdc565b83811115612006576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058207936b9fe465de2185cea1e9679658bc26d0395a052f8613c6845d0707adfc6a46c6578706572696d656e74616cf50037608060405234801561001057600080fd5b506105c1806100206000396000f300608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063446a1fe11461005c5780634ef4f309146101065780637287846d1461018b575b600080fd5b34801561006857600080fd5b5061008b6004803603810190808035600019169060200190929190505050610231565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100cb5780820151818401526020810190506100b0565b50505050905090810190601f1680156100f85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561011257600080fd5b5061016d600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610430565b60405180826000191660001916815260200191505060405180910390f35b34801561019757600080fd5b506101b66004803603810190808035906020019092919050505061043e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101f65780820151818401526020810190506101db565b50505050905090810190601f1680156102235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60608060008060006060600060206040519080825280601f01601f1916602001820160405280156102715781602001602082028038833980820191505090505b50955060009450600093505b602084101561033b578360080260020a886001900402600102925060007f010000000000000000000000000000000000000000000000000000000000000002837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614151561032e578286868151811015156102f557fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535084806001019550505b838060010194505061027d565b846040519080825280601f01601f19166020018201604052801561036e5781602001602082028038833980820191505090505b509150600090505b8481101561042257858181518110151561038c57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000282828151811015156103e557fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050610376565b819650505050505050919050565b600060208201519050919050565b6060600080606060008086141561048c576040805190810160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250945061058c565b8593505b6000841415156104b6578280600101935050600a848115156104ae57fe5b049350610490565b826040519080825280601f01601f1916602001820160405280156104e95781602001602082028038833980820191505090505b5091506001830390505b60008614151561058857600a8681151561050957fe5b066030017f01000000000000000000000000000000000000000000000000000000000000000282828060019003935081518110151561054457fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8681151561058057fe5b0495506104f3565b8194505b505050509190505600a165627a7a723058206e289e814acf9d0636c9c699551be90f096b8474ffd972603859d402431dcd410029"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"proposal_title\",\"type\":\"string\"},{\"name\":\"proposal_ballot\",\"type\":\"string\"}],\"name\":\"insert\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"main_value\",\"type\":\"string\"},{\"name\":\"proposal_title\",\"type\":\"string\"}],\"name\":\"check\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createUserData\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"main_value\",\"type\":\"string\"},{\"name\":\"key_name\",\"type\":\"string\"},{\"name\":\"key_value\",\"type\":\"string\"},{\"name\":\"get_name\",\"type\":\"string\"}],\"name\":\"select\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"show\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"main_value\",\"type\":\"string\"},{\"name\":\"key_name\",\"type\":\"string\"},{\"name\":\"key_value\",\"type\":\"string\"}],\"name\":\"remove\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"b\",\"type\":\"int256\"}],\"name\":\"LoginsertIncrement\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_INSERT = "insert";

    public static final String FUNC_CHECK = "check";

    public static final String FUNC_CREATEUSERDATA = "createUserData";

    public static final String FUNC_SELECT = "select";

    public static final String FUNC_SHOW = "show";

    public static final String FUNC_REMOVE = "remove";

    public static final Event LOGINSERTINCREMENT_EVENT = new Event("LoginsertIncrement", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    protected UserData(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt insert(String id, String proposal_title, String proposal_ballot) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new Utf8String(id),
                new Utf8String(proposal_title),
                new Utf8String(proposal_ballot)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] insert(String id, String proposal_title, String proposal_ballot, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new Utf8String(id),
                new Utf8String(proposal_title),
                new Utf8String(proposal_ballot)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInsert(String id, String proposal_title, String proposal_ballot) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new Utf8String(id),
                new Utf8String(proposal_title),
                new Utf8String(proposal_ballot)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getInsertInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getInsertOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt check(String main_value, String proposal_title) {
        final Function function = new Function(
                FUNC_CHECK, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(proposal_title)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] check(String main_value, String proposal_title, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CHECK, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(proposal_title)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCheck(String main_value, String proposal_title) {
        final Function function = new Function(
                FUNC_CHECK, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(proposal_title)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getCheckInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CHECK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getCheckOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CHECK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt createUserData() {
        final Function function = new Function(
                FUNC_CREATEUSERDATA, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] createUserData(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEUSERDATA, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateUserData() {
        final Function function = new Function(
                FUNC_CREATEUSERDATA, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getCreateUserDataOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEUSERDATA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt select(String main_value, String key_name, String key_value, String get_name) {
        final Function function = new Function(
                FUNC_SELECT, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value),
                new Utf8String(get_name)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] select(String main_value, String key_name, String key_value, String get_name, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SELECT, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value),
                new Utf8String(get_name)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSelect(String main_value, String key_name, String key_value, String get_name) {
        final Function function = new Function(
                FUNC_SELECT, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value),
                new Utf8String(get_name)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, String, String> getSelectInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue()
                );
    }

    public Tuple1<String> getSelectOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple2<List<String>, List<String>> show(String id) throws ContractException {
        final Function function = new Function(FUNC_SHOW, 
                Arrays.<Type>asList(new Utf8String(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<String>, List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()), 
                convertToNative((List<Utf8String>) results.get(1).getValue()));
    }

    public TransactionReceipt remove(String main_value, String key_name, String key_value) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] remove(String main_value, String key_name, String key_value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemove(String main_value, String key_name, String key_value) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getRemoveInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getRemoveOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public List<LoginsertIncrementEventResponse> getLoginsertIncrementEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(LOGINSERTINCREMENT_EVENT, transactionReceipt);
        ArrayList<LoginsertIncrementEventResponse> responses = new ArrayList<LoginsertIncrementEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            LoginsertIncrementEventResponse typedResponse = new LoginsertIncrementEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.b = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeLoginsertIncrementEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGINSERTINCREMENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeLoginsertIncrementEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGINSERTINCREMENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static UserData load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new UserData(contractAddress, client, credential);
    }

    public static UserData deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(UserData.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class LoginsertIncrementEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger b;
    }
}
