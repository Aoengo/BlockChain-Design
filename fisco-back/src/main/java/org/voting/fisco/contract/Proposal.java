package org.voting.fisco.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Proposal extends Contract {
    public static final String[] BINARY_ARRAY = {"","","ffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015611d9b578082015181840152602081019050611d80565b50505050905090810190601f168015611dc85780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015611de857600080fd5b505af1158015611dfc573d6000803e3d6000fd5b505050506040513d6020811015611e1257600080fd5b8101908080519060200190929190505050905060008173ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611e8b57600080fd5b505af1158015611e9f573d6000803e3d6000fd5b505050506040513d6020811015611eb557600080fd5b81019080805190602001909291905050501415611ed6576002549350611edc565b60035493505b5050509392505050565b600042905090565b60606000806000611f356040805190810160405280600881526020017f50726f706f73616c0000000000000000000000000000000000000000000000008152508888612936565b925092508273ffffffffffffffffffffffffffffffffffffffff1663e8434e3989846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015611ff4578082015181840152602081019050611fd9565b50505050905090810190601f1680156120215780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561204157600080fd5b505af1158015612055573d6000803e3d6000fd5b505050506040513d602081101561206b57600080fd5b8101908080519060200190929190505050905060008173ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156120e457600080fd5b505af11580156120f8573d6000803e3d6000fd5b505050506040513d602081101561210e57600080fd5b81019080805190602001909291905050501415612162576040805190810160405280600581526020017f6572726f720000000000000000000000000000000000000000000000000000008152509350612374565b8073ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b1580156121d257600080fd5b505af11580156121e6573d6000803e3d6000fd5b505050506040513d60208110156121fc57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16639c981fcb866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612294578082015181840152602081019050612279565b50505050905090810190601f1680156122c15780820380516001836020036101000a031916815260200191505b5092505050600060405180830381600087803b1580156122e057600080fd5b505af11580156122f4573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561231e57600080fd5b81019080805164010000000081111561233657600080fd5b8281019050602081018481111561234c57600080fd5b815185600182028301116401000000008211171561236957600080fd5b505092919050505093505b505050949350505050565b6000806000806123c56040805190810160405280600881526020017f50726f706f73616c0000000000000000000000000000000000000000000000008152508888612936565b925092508273ffffffffffffffffffffffffffffffffffffffff1663e8434e3989846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015612484578082015181840152602081019050612469565b50505050905090810190601f1680156124b15780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156124d157600080fd5b505af11580156124e5573d6000803e3d6000fd5b505050506040513d60208110156124fb57600080fd5b8101908080519060200190929190505050905060008173ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561257457600080fd5b505af1158015612588573d6000803e3d6000fd5b505050506040513d602081101561259e57600080fd5b810190808051906020019092919050505014156125bf57600054935061277b565b8073ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561262f57600080fd5b505af1158015612643573d6000803e3d6000fd5b505050506040513d602081101561265957600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663fda69fae866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156126f15780820151818401526020810190506126d6565b50505050905090810190601f16801561271e5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561273d57600080fd5b505af1158015612751573d6000803e3d6000fd5b505050506040513d602081101561276757600080fd5b810190808051906020019092919050505093505b505050949350505050565b6000806000806127cc6040805190810160405280600881526020017f50726f706f73616c0000000000000000000000000000000000000000000000008152508787612936565b925092508273ffffffffffffffffffffffffffffffffffffffff166328bb211788846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561288b578082015181840152602081019050612870565b50505050905090810190601f1680156128b85780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156128d857600080fd5b505af11580156128ec573d6000803e3d6000fd5b505050506040513d602081101561290257600080fd5b81019080805190602001909291905050509050600081131561292857600154935061292c565b8093505b5050509392505050565b600080600080600061100192508273ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280600881526020017f50726f706f73616c0000000000000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612a005780820151818401526020810190506129e5565b50505050905090810190601f168015612a2d5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b158015612a4c57600080fd5b505af1158015612a60573d6000803e3d6000fd5b505050506040513d6020811015612a7657600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015612aed57600080fd5b505af1158015612b01573d6000803e3d6000fd5b505050506040513d6020811015612b1757600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff1663cd30a1d188886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835285818151815260200191508051906020019080838360005b83811015612bb7578082015181840152602081019050612b9c565b50505050905090810190601f168015612be45780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015612c1d578082015181840152602081019050612c02565b50505050905090810190601f168015612c4a5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015612c6b57600080fd5b505af1158015612c7f573d6000803e3d6000fd5b505050508181945094505050509350939150505600a165627a7a723058206b3392fbd45c0f448ef8c602aafa3d82379328050c1df615b97f1144cbace00a0029"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","ffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825285818151815260200191508051906020019080838360005b83811015610dc0578082015181840152602081019050610da5565b50505050905090810190601f168015610ded5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015610e0e57600080fd5b505af1158015610e22573d6000803e3d6000fd5b505050506040513d6020811015610e3857600080fd5b810190808051906020019092919050505090506000811315610e5e576001549450610e62565b8094505b5050505095945050505050565b600080600080600080600061100195508573ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600881526020017f50726f706f73616c0000000000000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610f3c578082015181840152602081019050610f21565b50505050905090810190601f168015610f695780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b158015610f8857600080fd5b505af1158015610f9c573d6000803e3d6000fd5b505050506040513d6020811015610fb257600080fd5b81019080805190602001909291905050509450600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415611004576000549650611677565b6110448a6040805190810160405280600d81526020017f50726f706f73616c5469746c65000000000000000000000000000000000000008152508c6126e6565b935060009250600254841415611671578473ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156110b857600080fd5b505af11580156110cc573d6000803e3d6000fd5b505050506040513d60208110156110e257600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff16631a391cb48b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018381038352600d8152602001807f50726f706f73616c5469746c6500000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156111b557808201518184015260208101905061119a565b50505050905090810190601f1680156111e25780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561120257600080fd5b505af1158015611216573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16631a391cb48a6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018381038352600c8152602001807f42656c6f6e675573657249440000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156112da5780820151818401526020810190506112bf565b50505050905090810190601f1680156113075780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561132757600080fd5b505af115801561133b573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663def42698846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825260118152602001807f506172746963697061746f72734e756d7300000000000000000000000000000081525060200192505050600060405180830381600087803b1580156113e757600080fd5b505af11580156113fb573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16631a391cb4896040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018381038352600c8152602001807f446561646c696e6554696d650000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156114bf5780820151818401526020810190506114a4565b50505050905090810190601f1680156114ec5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561150c57600080fd5b505af1158015611520573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff16634c6f30c08b846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156115df5780820151818401526020810190506115c4565b50505050905090810190601f16801561160c5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561162c57600080fd5b505af1158015611640573d6000803e3d6000fd5b505050506040513d602081101561165657600080fd5b81019080805190602001909291905050509050809650611677565b60035496505b5050505050509392505050565b600042905090565b6000806000806116d26040805190810160405280600881526020017f50726f706f73616c0000000000000000000000000000000000000000000000008152508888612936565b925092508273ffffffffffffffffffffffffffffffffffffffff1663d8ac595789846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015611791578082015181840152602081019050611776565b50505050905090810190601f1680156117be5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156117de57600080fd5b505af11580156117f2573d6000803e3d6000fd5b505050506040513d602081101561180857600080fd5b8101908080519060200190929190505050905060008173ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561188157600080fd5b505af1158015611895573d6000803e3d6000fd5b505050506040513d60208110156118ab57600080fd5b810190808051906020019092919050505014156118cc576000549350611a88565b8073ffffffffffffffffffffffffffffffffffffffff16633dd2b61460006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561193c57600080fd5b505af1158015611950573d6000803e3d6000fd5b505050506040513d602081101561196657600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16634900862e866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156119fe5780820151818401526020810190506119e3565b50505050905090810190601f168015611a2b5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b158015611a4a57600080fd5b505af1158015611a5e573d6000803e3d6000fd5b505050506040513d6020811015611a7457600080fd5b810190808051906020019092919050505093505b505050949350505050565b6000806000806000611adb6040805190810160405280600881526020017f50726f706f73616c0000000000000000000000000000000000000000000000008152508a8a612936565b935093508373ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611b4357600080fd5b505af1158015611b57573d6000803e3d6000fd5b505050506040513d6020811015611b6d57600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff1663def4269888886040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001838152602001828103825284818151815260200191508051906020019080838360005b83811015611c0f578082015181840152602081019050611bf4565b50505050905090810190601f168015611c3c5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015611c5c57600080fd5b505af1158015611c70573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663664b37d68b84866040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182810382528581815181526020","0191508051906020019080838360005b83811015611d62578082015181840152602081019050611d47565b50505050905090810190601f168015611d8f5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015611db057600080fd5b505af1158015611dc4573d6000803e3d6000fd5b505050506040513d6020811015611dda57600080fd5b810190808051906020019092919050505090506000811315611e00576001549450611e04565b8094505b5050505095945050505050565b60606000806000611e586040805190810160405280600881526020017f50726f706f73616c0000000000000000000000000000000000000000000000008152508888612936565b925092508273ffffffffffffffffffffffffffffffffffffffff1663d8ac595789846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015611f17578082015181840152602081019050611efc565b50505050905090810190601f168015611f445780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015611f6457600080fd5b505af1158015611f78573d6000803e3d6000fd5b505050506040513d6020811015611f8e57600080fd5b8101908080519060200190929190505050905060008173ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561200757600080fd5b505af115801561201b573d6000803e3d6000fd5b505050506040513d602081101561203157600080fd5b81019080805190602001909291905050501415612085576040805190810160405280600581526020017f6572726f720000000000000000000000000000000000000000000000000000008152509350612297565b8073ffffffffffffffffffffffffffffffffffffffff16633dd2b61460006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b1580156120f557600080fd5b505af1158015612109573d6000803e3d6000fd5b505050506040513d602081101561211f57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16639bca41e8866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156121b757808201518184015260208101905061219c565b50505050905090810190601f1680156121e45780820380516001836020036101000a031916815260200191505b5092505050600060405180830381600087803b15801561220357600080fd5b505af1158015612217573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561224157600080fd5b81019080805164010000000081111561225957600080fd5b8281019050602081018481111561226f57600080fd5b815185600182028301116401000000008211171561228c57600080fd5b505092919050505093505b505050949350505050565b60008060006122af611684565b9150612327846040805190810160405280600d81526020017f50726f706f73616c5469746c6500000000000000000000000000000000000000815250866040805190810160405280600c81526020017f446561646c696e6554696d65000000000000000000000000000000000000000081525061168c565b90508082101561233a576001925061233f565b600092505b5050919050565b600080600061100191508173ffffffffffffffffffffffffffffffffffffffff1663c92a78016040805190810160405280600881526020017f50726f706f73616c0000000000000000000000000000000000000000000000008152506040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018060200180602001848103845285818151815260200191508051906020019080838360005b838110156124155780820151818401526020810190506123fa565b50505050905090810190601f1680156124425780820380516001836020036101000a031916815260200191505b508481038352600d8152602001807f50726f706f73616c5469746c65000000000000000000000000000000000000008152506020018481038252602b8152602001807f42656c6f6e675573657249442c506172746963697061746f72734e756d732c4481526020017f6561646c696e6554696d65000000000000000000000000000000000000000000815250604001945050505050602060405180830381600087803b1580156124f157600080fd5b505af1158015612505573d6000803e3d6000fd5b505050506040513d602081101561251b57600080fd5b81019080805190602001909291905050509050809250505090565b60008060008061257c6040805190810160405280600881526020017f50726f706f73616c0000000000000000000000000000000000000000000000008152508787612936565b925092508273ffffffffffffffffffffffffffffffffffffffff166309ff42f088846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561263b578082015181840152602081019050612620565b50505050905090810190601f1680156126685780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561268857600080fd5b505af115801561269c573d6000803e3d6000fd5b505050506040513d60208110156126b257600080fd5b8101908080519060200190929190505050905060008113156126d85760015493506126dc565b8093505b5050509392505050565b60008060008061272c6040805190810160405280600881526020017f50726f706f73616c0000000000000000000000000000000000000000000000008152508787612936565b925092508273ffffffffffffffffffffffffffffffffffffffff1663d8ac595788846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156127eb5780820151818401526020810190506127d0565b50505050905090810190601f1680156128185780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561283857600080fd5b505af115801561284c573d6000803e3d6000fd5b505050506040513d602081101561286257600080fd5b8101908080519060200190929190505050905060008173ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156128db57600080fd5b505af11580156128ef573d6000803e3d6000fd5b505050506040513d602081101561290557600080fd5b8101908080519060200190929190505050141561292657600254935061292c565b60035493505b5050509392505050565b600080600080600061100192508273ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600881526020017f50726f706f73616c0000000000000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612a005780820151818401526020810190506129e5565b50505050905090810190601f168015612a2d5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b158015612a4c57600080fd5b505af1158015612a60573d6000803e3d6000fd5b505050506040513d6020811015612a7657600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015612aed57600080fd5b505af1158015612b01573d6000803e3d6000fd5b505050506040513d6020811015612b1757600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff1663ae763db588886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835285818151815260200191508051906020019080838360005b83811015612bb7578082015181840152602081019050612b9c565b50505050905090810190601f168015612be45780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015612c1d578082015181840152602081019050612c02565b50505050905090810190601f168015612c4a5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015612c6b57600080fd5b505af1158015612c7f573d6000803e3d6000fd5b505050508181945094505050509350939150505600a165627a7a7230582052398662a8d3183ca4cbc542152c7af256726f81f43faa98d1916e6a2248a42b0029"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"main_value\",\"type\":\"string\"},{\"name\":\"key_name\",\"type\":\"string\"},{\"name\":\"key_value\",\"type\":\"string\"},{\"name\":\"new_name\",\"type\":\"string\"},{\"name\":\"new_value\",\"type\":\"int256\"}],\"name\":\"update\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"title\",\"type\":\"string\"}],\"name\":\"compareTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createProposal\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"main_value\",\"type\":\"string\"},{\"name\":\"key_name\",\"type\":\"string\"},{\"name\":\"key_value\",\"type\":\"string\"},{\"name\":\"new_name\",\"type\":\"string\"},{\"name\":\"new_value\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proposal_title\",\"type\":\"string\"},{\"name\":\"belong_to\",\"type\":\"string\"},{\"name\":\"time\",\"type\":\"string\"}],\"name\":\"insert\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"main_value\",\"type\":\"string\"},{\"name\":\"key_name\",\"type\":\"string\"},{\"name\":\"key_value\",\"type\":\"string\"}],\"name\":\"check\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"main_value\",\"type\":\"string\"},{\"name\":\"key_name\",\"type\":\"string\"},{\"name\":\"key_value\",\"type\":\"string\"},{\"name\":\"get_name\",\"type\":\"string\"}],\"name\":\"select\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"main_value\",\"type\":\"string\"},{\"name\":\"key_name\",\"type\":\"string\"},{\"name\":\"key_value\",\"type\":\"string\"},{\"name\":\"get_name\",\"type\":\"string\"}],\"name\":\"selectInt\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"main_value\",\"type\":\"string\"},{\"name\":\"key_name\",\"type\":\"string\"},{\"name\":\"key_value\",\"type\":\"string\"}],\"name\":\"remove\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"a\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"string\"}],\"name\":\"LogIncrement\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_UPDATE = "update";

    public static final String FUNC_COMPARETIME = "compareTime";

    public static final String FUNC_CREATEPROPOSAL = "createProposal";

    public static final String FUNC_INSERT = "insert";

    public static final String FUNC_CHECK = "check";

    public static final String FUNC_GETTIME = "getTime";

    public static final String FUNC_SELECT = "select";

    public static final String FUNC_SELECTINT = "selectInt";

    public static final String FUNC_REMOVE = "remove";

    public static final Event LOGINCREMENT_EVENT = new Event("LogIncrement", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}));
    ;

    protected Proposal(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt update(String main_value, String key_name, String key_value, String new_name, BigInteger new_value) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value),
                new Utf8String(new_name),
                new Int256(new_value)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] update(String main_value, String key_name, String key_value, String new_name, BigInteger new_value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value),
                new Utf8String(new_name),
                new Int256(new_value)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdate(String main_value, String key_name, String key_value, String new_name, BigInteger new_value) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value),
                new Utf8String(new_name),
                new Int256(new_value)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, String, String, BigInteger> getUpdateStringStringStringStringInt256Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue()
                );
    }

    public Tuple1<BigInteger> getUpdateStringStringStringStringInt256Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt compareTime(String title) {
        final Function function = new Function(
                FUNC_COMPARETIME, 
                Arrays.<Type>asList(new Utf8String(title)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] compareTime(String title, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_COMPARETIME, 
                Arrays.<Type>asList(new Utf8String(title)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCompareTime(String title) {
        final Function function = new Function(
                FUNC_COMPARETIME, 
                Arrays.<Type>asList(new Utf8String(title)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getCompareTimeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_COMPARETIME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<Boolean> getCompareTimeOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_COMPARETIME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt createProposal() {
        final Function function = new Function(
                FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] createProposal(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateProposal() {
        final Function function = new Function(
                FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getCreateProposalOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEPROPOSAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt update(String main_value, String key_name, String key_value, String new_name, String new_value) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value),
                new Utf8String(new_name),
                new Utf8String(new_value)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] update(String main_value, String key_name, String key_value, String new_name, String new_value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value),
                new Utf8String(new_name),
                new Utf8String(new_value)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdate(String main_value, String key_name, String key_value, String new_name, String new_value) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value),
                new Utf8String(new_name),
                new Utf8String(new_value)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, String, String, String> getUpdateStringStringStringStringStringInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue()
                );
    }

    public Tuple1<BigInteger> getUpdateStringStringStringStringStringOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt insert(String proposal_title, String belong_to, String time) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new Utf8String(proposal_title),
                new Utf8String(belong_to),
                new Utf8String(time)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] insert(String proposal_title, String belong_to, String time, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new Utf8String(proposal_title),
                new Utf8String(belong_to),
                new Utf8String(time)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInsert(String proposal_title, String belong_to, String time) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new Utf8String(proposal_title),
                new Utf8String(belong_to),
                new Utf8String(time)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getInsertInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getInsertOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt check(String main_value, String key_name, String key_value) {
        final Function function = new Function(
                FUNC_CHECK, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] check(String main_value, String key_name, String key_value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CHECK, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCheck(String main_value, String key_name, String key_value) {
        final Function function = new Function(
                FUNC_CHECK, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getCheckInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CHECK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getCheckOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CHECK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public BigInteger getTime() throws ContractException {
        final Function function = new Function(FUNC_GETTIME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt select(String main_value, String key_name, String key_value, String get_name) {
        final Function function = new Function(
                FUNC_SELECT, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value),
                new Utf8String(get_name)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] select(String main_value, String key_name, String key_value, String get_name, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SELECT, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value),
                new Utf8String(get_name)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSelect(String main_value, String key_name, String key_value, String get_name) {
        final Function function = new Function(
                FUNC_SELECT, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value),
                new Utf8String(get_name)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, String, String> getSelectInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue()
                );
    }

    public Tuple1<String> getSelectOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt selectInt(String main_value, String key_name, String key_value, String get_name) {
        final Function function = new Function(
                FUNC_SELECTINT, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value),
                new Utf8String(get_name)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] selectInt(String main_value, String key_name, String key_value, String get_name, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SELECTINT, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value),
                new Utf8String(get_name)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSelectInt(String main_value, String key_name, String key_value, String get_name) {
        final Function function = new Function(
                FUNC_SELECTINT, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value),
                new Utf8String(get_name)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, String, String> getSelectIntInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SELECTINT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue()
                );
    }

    public Tuple1<BigInteger> getSelectIntOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SELECTINT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt remove(String main_value, String key_name, String key_value) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] remove(String main_value, String key_name, String key_value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemove(String main_value, String key_name, String key_value) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getRemoveInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getRemoveOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public List<LogIncrementEventResponse> getLogIncrementEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(LOGINCREMENT_EVENT, transactionReceipt);
        ArrayList<LogIncrementEventResponse> responses = new ArrayList<LogIncrementEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            LogIncrementEventResponse typedResponse = new LogIncrementEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.a = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.b = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeLogIncrementEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGINCREMENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeLogIncrementEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGINCREMENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static Proposal load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Proposal(contractAddress, client, credential);
    }

    public static Proposal deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(Proposal.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class LogIncrementEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger a;

        public String b;
    }
}
