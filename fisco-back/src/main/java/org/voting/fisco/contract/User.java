package org.voting.fisco.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class User extends Contract {
    public static final String[] BINARY_ARRAY = {"","","ffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cfb51928836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611d76578082015181840152602081019050611d5b565b50505050905090810190601f168015611da35780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b158015611dc257600080fd5b505af1158015611dd6573d6000803e3d6000fd5b505050506040513d6020811015611dec57600080fd5b810190808051906020019092919050505060001916600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cfb51928611eb5866040805190810160405280600281526020017f4944000000000000000000000000000000000000000000000000000000000000815250886040805190810160405280600881526020017f50617373776f7264000000000000000000000000000000000000000000000000815250611839565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611f20578082015181840152602081019050611f05565b50505050905090810190601f168015611f4d5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b158015611f6c57600080fd5b505af1158015611f80573d6000803e3d6000fd5b505050506040513d6020811015611f9657600080fd5b8101908080519060200190929190505050600019161415611fbb576001549050611fc1565b60005490505b92915050565b60008060008061200d6040805190810160405280600481526020017f55736572000000000000000000000000000000000000000000000000000000008152508787612177565b925092508273ffffffffffffffffffffffffffffffffffffffff166328bb211788846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156120cc5780820151818401526020810190506120b1565b50505050905090810190601f1680156120f95780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561211957600080fd5b505af115801561212d573d6000803e3d6000fd5b505050506040513d602081101561214357600080fd5b81019080805190602001909291905050509050600081131561216957600154935061216d565b8093505b5050509392505050565b600080600080600061100192508273ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280600481526020017f55736572000000000000000000000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612241578082015181840152602081019050612226565b50505050905090810190601f16801561226e5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561228d57600080fd5b505af11580156122a1573d6000803e3d6000fd5b505050506040513d60208110156122b757600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561232e57600080fd5b505af1158015612342573d6000803e3d6000fd5b505050506040513d602081101561235857600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff1663cd30a1d188886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835285818151815260200191508051906020019080838360005b838110156123f85780820151818401526020810190506123dd565b50505050905090810190601f1680156124255780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101561245e578082015181840152602081019050612443565b50505050905090810190601f16801561248b5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1580156124ac57600080fd5b505af11580156124c0573d6000803e3d6000fd5b505050508181945094505050509350939150505600a165627a7a72305820cc5b60246f195bc3c56dffdc05217e3089f2847c247de650ef21b593f8a0fc730029608060405234801561001057600080fd5b506105c1806100206000396000f300608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680639201de551461005c578063cfb5192814610106578063f76f950e1461018b575b600080fd5b34801561006857600080fd5b5061008b6004803603810190808035600019169060200190929190505050610231565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100cb5780820151818401526020810190506100b0565b50505050905090810190601f1680156100f85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561011257600080fd5b5061016d600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610430565b60405180826000191660001916815260200191505060405180910390f35b34801561019757600080fd5b506101b66004803603810190808035906020019092919050505061043e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101f65780820151818401526020810190506101db565b50505050905090810190601f1680156102235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60608060008060006060600060206040519080825280601f01601f1916602001820160405280156102715781602001602082028038833980820191505090505b50955060009450600093505b602084101561033b578360080260020a886001900402600102925060007f010000000000000000000000000000000000000000000000000000000000000002837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614151561032e578286868151811015156102f557fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535084806001019550505b838060010194505061027d565b846040519080825280601f01601f19166020018201604052801561036e5781602001602082028038833980820191505090505b509150600090505b8481101561042257858181518110151561038c57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000282828151811015156103e557fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050610376565b819650505050505050919050565b600060208201519050919050565b6060600080606060008086141561048c576040805190810160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250945061058c565b8593505b6000841415156104b6578280600101935050600a848115156104ae57fe5b049350610490565b826040519080825280601f01601f1916602001820160405280156104e95781602001602082028038833980820191505090505b5091506001830390505b60008614151561058857600a8681151561050957fe5b066030017f01000000000000000000000000000000000000000000000000000000000000000282828060019003935081518110151561054457fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8681151561058057fe5b0495506104f3565b8194505b505050509190505600a165627a7a723058209c093563a3fe7d2685274ae2016ed0ff5deacd232088ea3703ea29d8bad347f30029"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","6000fd5b505050506040513d6020811015610cfe57600080fd5b81019080805190602001909291905050509350600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610d50576000549550611413565b610d90896040805190810160405280600281526020017f49440000000000000000000000000000000000000000000000000000000000008152508b611f27565b92507f9073b238db3409a275a7d1bf995b63bc1940f86434cb824b800e4110990fd2c589846040518080602001838152602001828103825284818151815260200191508051906020019080838360005b83811015610dfb578082015181840152602081019050610de0565b50505050905090810190601f168015610e285780820380516001836020036101000a031916815260200191505b50935050505060405180910390a160025483141561140d578373ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610ea457600080fd5b505af1158015610eb8573d6000803e3d6000fd5b505050506040513d6020811015610ece57600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff16631a391cb48a6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260028152602001807f4944000000000000000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015610fa1578082015181840152602081019050610f86565b50505050905090810190601f168015610fce5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015610fee57600080fd5b505af1158015611002573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16631a391cb4896040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260088152602001807f557365724e616d65000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156110c65780820151818401526020810190506110ab565b50505050905090810190601f1680156110f35780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561111357600080fd5b505af1158015611127573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16631a391cb4886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260088152602001807f50617373776f7264000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156111eb5780820151818401526020810190506111d0565b50505050905090810190601f1680156112185780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561123857600080fd5b505af115801561124c573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff16634c6f30c08a846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561130b5780820151818401526020810190506112f0565b50505050905090810190601f1680156113385780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561135857600080fd5b505af115801561136c573d6000803e3d6000fd5b505050506040513d602081101561138257600080fd5b810190808051906020019092919050505090507f9073b238db3409a275a7d1bf995b63bc1940f86434cb824b800e4110990fd2c5816040518080602001838152602001828103825260028152602001807f696e0000000000000000000000000000000000000000000000000000000000008152506020019250505060405180910390a1809550611413565b60035495505b50505050509392505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634ef4f309836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156114cb5780820151818401526020810190506114b0565b50505050905090810190601f1680156114f85780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561151757600080fd5b505af115801561152b573d6000803e3d6000fd5b505050506040513d602081101561154157600080fd5b810190808051906020019092919050505060001916600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634ef4f30961160a866040805190810160405280600281526020017f4944000000000000000000000000000000000000000000000000000000000000815250886040805190810160405280600881526020017f50617373776f726400000000000000000000000000000000000000000000000081525061171c565b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561167557808201518184015260208101905061165a565b50505050905090810190601f1680156116a25780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b1580156116c157600080fd5b505af11580156116d5573d6000803e3d6000fd5b505050506040513d60208110156116eb57600080fd5b8101908080519060200190929190505050600019161415611710576001549050611716565b60005490505b92915050565b606060008060006117636040805190810160405280600481526020017f55736572000000000000000000000000000000000000000000000000000000008152508888612177565b925092508273ffffffffffffffffffffffffffffffffffffffff1663d8ac595789846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015611822578082015181840152602081019050611807565b50505050905090810190601f16801561184f5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561186f57600080fd5b505af1158015611883573d6000803e3d6000fd5b505050506040513d602081101561189957600080fd5b8101908080519060200190929190505050905060018173ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561191257600080fd5b505af1158015611926573d6000803e3d6000fd5b505050506040513d602081101561193c57600080fd5b81019080805190602001909291905050501415611b69578073ffffffffffffffffffffffffffffffffffffffff16633dd2b61460006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b1580156119c357600080fd5b505af11580156119d7573d6000803e3d6000fd5b505050506040513d60208110156119ed57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16639bca41e8866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611a85578082015181840152602081019050611a6a565b50505050905090810190601f168015611ab25780820380516001836020036101000a031916815260200191505b5092505050600060405180830381600087803b158015611ad157600080fd5b505af1158015611ae5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015611b0f57600080fd5b810190808051640100000000811115611b2757600080fd5b82810190506020810184811115611b3d57600080fd5b8151856001820283011164010000000082111715611b5a57600080fd5b50509291905050509350611ba2565b6040805190810160405280600581526020017f6572726f7200000000000000000000000000000000000000000000000000000081525093505b505050949350505050565b600080600061100191508173ffffffffffffffffffffffffffffffffffffffff1663c92a78016040805190810160405280600481526020017f55736572000000000000000000000000000000000000000000000000000000008152506040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018060200180602001848103845285818151815260200191508051906020019080838360005b83811015611c7c578082015181840152602081019050611c61565b50505050905090810190601f168015611ca95780820380516001836020036101000a031916815260200191505b50848103835260028152602001807f4944000000000000000000000000000000000000000000000000000000000000815250602001848103825260","118152602001807f557365724e616d652c50617373776f7264000000000000000000000000000000815250602001945050505050602060405180830381600087803b158015611d3257600080fd5b505af1158015611d46573d6000803e3d6000fd5b505050506040513d6020811015611d5c57600080fd5b81019080805190602001909291905050509050809250505090565b600080600080611dbd6040805190810160405280600481526020017f55736572000000000000000000000000000000000000000000000000000000008152508787612177565b925092508273ffffffffffffffffffffffffffffffffffffffff166309ff42f088846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015611e7c578082015181840152602081019050611e61565b50505050905090810190601f168015611ea95780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015611ec957600080fd5b505af1158015611edd573d6000803e3d6000fd5b505050506040513d6020811015611ef357600080fd5b810190808051906020019092919050505090506000811315611f19576001549350611f1d565b8093505b5050509392505050565b600080600080611f6d6040805190810160405280600481526020017f55736572000000000000000000000000000000000000000000000000000000008152508787612177565b925092508273ffffffffffffffffffffffffffffffffffffffff1663d8ac595788846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561202c578082015181840152602081019050612011565b50505050905090810190601f1680156120595780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561207957600080fd5b505af115801561208d573d6000803e3d6000fd5b505050506040513d60208110156120a357600080fd5b8101908080519060200190929190505050905060008173ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561211c57600080fd5b505af1158015612130573d6000803e3d6000fd5b505050506040513d602081101561214657600080fd5b8101908080519060200190929190505050141561216757600254935061216d565b60035493505b5050509392505050565b600080600080600061100192508273ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600481526020017f55736572000000000000000000000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612241578082015181840152602081019050612226565b50505050905090810190601f16801561226e5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561228d57600080fd5b505af11580156122a1573d6000803e3d6000fd5b505050506040513d60208110156122b757600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561232e57600080fd5b505af1158015612342573d6000803e3d6000fd5b505050506040513d602081101561235857600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff1663ae763db588886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835285818151815260200191508051906020019080838360005b838110156123f85780820151818401526020810190506123dd565b50505050905090810190601f1680156124255780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101561245e578082015181840152602081019050612443565b50505050905090810190601f16801561248b5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1580156124ac57600080fd5b505af11580156124c0573d6000803e3d6000fd5b505050508181945094505050509350939150505600a165627a7a723058204a8bbe317f2ee3e1898099ecafc29a022251396e4a9d54068545aad5ac5440440029608060405234801561001057600080fd5b506105c1806100206000396000f300608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063446a1fe11461005c5780634ef4f309146101065780637287846d1461018b575b600080fd5b34801561006857600080fd5b5061008b6004803603810190808035600019169060200190929190505050610231565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100cb5780820151818401526020810190506100b0565b50505050905090810190601f1680156100f85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561011257600080fd5b5061016d600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610430565b60405180826000191660001916815260200191505060405180910390f35b34801561019757600080fd5b506101b66004803603810190808035906020019092919050505061043e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101f65780820151818401526020810190506101db565b50505050905090810190601f1680156102235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60608060008060006060600060206040519080825280601f01601f1916602001820160405280156102715781602001602082028038833980820191505090505b50955060009450600093505b602084101561033b578360080260020a886001900402600102925060007f010000000000000000000000000000000000000000000000000000000000000002837effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614151561032e578286868151811015156102f557fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535084806001019550505b838060010194505061027d565b846040519080825280601f01601f19166020018201604052801561036e5781602001602082028038833980820191505090505b509150600090505b8481101561042257858181518110151561038c57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000282828151811015156103e557fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050610376565b819650505050505050919050565b600060208201519050919050565b6060600080606060008086141561048c576040805190810160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250945061058c565b8593505b6000841415156104b6578280600101935050600a848115156104ae57fe5b049350610490565b826040519080825280601f01601f1916602001820160405280156104e95781602001602082028038833980820191505090505b5091506001830390505b60008614151561058857600a8681151561050957fe5b066030017f01000000000000000000000000000000000000000000000000000000000000000282828060019003935081518110151561054457fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8681151561058057fe5b0495506104f3565b8194505b505050509190505600a165627a7a723058206e289e814acf9d0636c9c699551be90f096b8474ffd972603859d402431dcd410029"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[],\"name\":\"createUser\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"main_value\",\"type\":\"string\"},{\"name\":\"key_name\",\"type\":\"string\"},{\"name\":\"key_value\",\"type\":\"string\"},{\"name\":\"new_name\",\"type\":\"string\"},{\"name\":\"new_value\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"user_name\",\"type\":\"string\"},{\"name\":\"password\",\"type\":\"string\"}],\"name\":\"insert\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"main_value\",\"type\":\"string\"},{\"name\":\"key_name\",\"type\":\"string\"},{\"name\":\"key_value\",\"type\":\"string\"}],\"name\":\"check\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"main_value\",\"type\":\"string\"},{\"name\":\"key_name\",\"type\":\"string\"},{\"name\":\"key_value\",\"type\":\"string\"},{\"name\":\"get_value\",\"type\":\"string\"}],\"name\":\"select\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"password\",\"type\":\"string\"}],\"name\":\"verify\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"main_value\",\"type\":\"string\"},{\"name\":\"key_name\",\"type\":\"string\"},{\"name\":\"key_value\",\"type\":\"string\"}],\"name\":\"remove\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"a\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"int256\"}],\"name\":\"LoginsertIncrement\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_CREATEUSER = "createUser";

    public static final String FUNC_UPDATE = "update";

    public static final String FUNC_INSERT = "insert";

    public static final String FUNC_CHECK = "check";

    public static final String FUNC_SELECT = "select";

    public static final String FUNC_VERIFY = "verify";

    public static final String FUNC_REMOVE = "remove";

    public static final Event LOGINSERTINCREMENT_EVENT = new Event("LoginsertIncrement", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}));
    ;

    protected User(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt createUser() {
        final Function function = new Function(
                FUNC_CREATEUSER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] createUser(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEUSER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateUser() {
        final Function function = new Function(
                FUNC_CREATEUSER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getCreateUserOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEUSER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt update(String main_value, String key_name, String key_value, String new_name, String new_value) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value),
                new Utf8String(new_name),
                new Utf8String(new_value)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] update(String main_value, String key_name, String key_value, String new_name, String new_value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value),
                new Utf8String(new_name),
                new Utf8String(new_value)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdate(String main_value, String key_name, String key_value, String new_name, String new_value) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value),
                new Utf8String(new_name),
                new Utf8String(new_value)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, String, String, String> getUpdateInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue()
                );
    }

    public Tuple1<BigInteger> getUpdateOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt insert(String id, String user_name, String password) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new Utf8String(id),
                new Utf8String(user_name),
                new Utf8String(password)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] insert(String id, String user_name, String password, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new Utf8String(id),
                new Utf8String(user_name),
                new Utf8String(password)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInsert(String id, String user_name, String password) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new Utf8String(id),
                new Utf8String(user_name),
                new Utf8String(password)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getInsertInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getInsertOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt check(String main_value, String key_name, String key_value) {
        final Function function = new Function(
                FUNC_CHECK, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] check(String main_value, String key_name, String key_value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CHECK, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCheck(String main_value, String key_name, String key_value) {
        final Function function = new Function(
                FUNC_CHECK, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getCheckInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CHECK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getCheckOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CHECK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt select(String main_value, String key_name, String key_value, String get_value) {
        final Function function = new Function(
                FUNC_SELECT, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value),
                new Utf8String(get_value)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] select(String main_value, String key_name, String key_value, String get_value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SELECT, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value),
                new Utf8String(get_value)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSelect(String main_value, String key_name, String key_value, String get_value) {
        final Function function = new Function(
                FUNC_SELECT, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value),
                new Utf8String(get_value)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, String, String> getSelectInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue()
                );
    }

    public Tuple1<String> getSelectOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt verify(String id, String password) {
        final Function function = new Function(
                FUNC_VERIFY, 
                Arrays.<Type>asList(new Utf8String(id),
                new Utf8String(password)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] verify(String id, String password, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_VERIFY, 
                Arrays.<Type>asList(new Utf8String(id),
                new Utf8String(password)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForVerify(String id, String password) {
        final Function function = new Function(
                FUNC_VERIFY, 
                Arrays.<Type>asList(new Utf8String(id),
                new Utf8String(password)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getVerifyInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_VERIFY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getVerifyOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_VERIFY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt remove(String main_value, String key_name, String key_value) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] remove(String main_value, String key_name, String key_value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemove(String main_value, String key_name, String key_value) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new Utf8String(main_value),
                new Utf8String(key_name),
                new Utf8String(key_value)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getRemoveInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getRemoveOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public List<LoginsertIncrementEventResponse> getLoginsertIncrementEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(LOGINSERTINCREMENT_EVENT, transactionReceipt);
        ArrayList<LoginsertIncrementEventResponse> responses = new ArrayList<LoginsertIncrementEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            LoginsertIncrementEventResponse typedResponse = new LoginsertIncrementEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.a = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.b = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeLoginsertIncrementEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGINSERTINCREMENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeLoginsertIncrementEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGINSERTINCREMENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static User load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new User(contractAddress, client, credential);
    }

    public static User deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(User.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class LoginsertIncrementEventResponse {
        public TransactionReceipt.Logs log;

        public String a;

        public BigInteger b;
    }
}
